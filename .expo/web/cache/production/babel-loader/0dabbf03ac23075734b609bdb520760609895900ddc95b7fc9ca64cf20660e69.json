{"ast":null,"code":"'use strict';import{configureLayoutAnimationBatch,makeShareableCloneRecursive}from\"./core.js\";import{isFabric,shouldBeUseWeb}from\"./PlatformChecker.js\";function createUpdateManager(){var animations=[];var deferredAnimations=[];return{update:function update(batchItem,isUnmounting){if(isUnmounting){deferredAnimations.push(batchItem);}else{animations.push(batchItem);}if(animations.length+deferredAnimations.length===1){isFabric()?this.flush():setImmediate(this.flush);}},flush:function flush(){configureLayoutAnimationBatch(animations.concat(deferredAnimations));animations.length=0;deferredAnimations.length=0;}};}export var updateLayoutAnimations;if(shouldBeUseWeb()){updateLayoutAnimations=function updateLayoutAnimations(){};}else{var updateLayoutAnimationsManager=createUpdateManager();updateLayoutAnimations=function updateLayoutAnimations(viewTag,type,config,sharedTransitionTag,isUnmounting){return updateLayoutAnimationsManager.update({viewTag:viewTag,type:type,config:config?makeShareableCloneRecursive(config):undefined,sharedTransitionTag:sharedTransitionTag},isUnmounting);};}","map":{"version":3,"names":["configureLayoutAnimationBatch","makeShareableCloneRecursive","isFabric","shouldBeUseWeb","createUpdateManager","animations","deferredAnimations","update","batchItem","isUnmounting","push","length","flush","setImmediate","concat","updateLayoutAnimations","updateLayoutAnimationsManager","viewTag","type","config","sharedTransitionTag","undefined"],"sources":["C:\\Users\\Jorn\\Documents\\hitster\\node_modules\\react-native-reanimated\\src\\UpdateLayoutAnimations.ts"],"sourcesContent":["'use strict';\nimport type {\n  LayoutAnimationBatchItem,\n  LayoutAnimationFunction,\n  LayoutAnimationType,\n  ProgressAnimationCallback,\n  SharedTransitionAnimationsFunction,\n} from './commonTypes';\nimport {\n  configureLayoutAnimationBatch,\n  makeShareableCloneRecursive,\n} from './core';\nimport { isFabric, shouldBeUseWeb } from './PlatformChecker';\n\nfunction createUpdateManager() {\n  const animations: LayoutAnimationBatchItem[] = [];\n  // When a stack is rerendered we reconfigure all the shared elements.\n  // To do that we want them to appear in our batch in the correct order,\n  // so we defer some of the updates to appear at the end of the batch.\n  const deferredAnimations: LayoutAnimationBatchItem[] = [];\n\n  return {\n    update(batchItem: LayoutAnimationBatchItem, isUnmounting?: boolean) {\n      if (isUnmounting) {\n        deferredAnimations.push(batchItem);\n      } else {\n        animations.push(batchItem);\n      }\n      if (animations.length + deferredAnimations.length === 1) {\n        isFabric() ? this.flush() : setImmediate(this.flush);\n      }\n    },\n    flush(this: void) {\n      configureLayoutAnimationBatch(animations.concat(deferredAnimations));\n      animations.length = 0;\n      deferredAnimations.length = 0;\n    },\n  };\n}\n\n/**\n * Lets you update the current configuration of the layout animation or shared\n * element transition for a given component. Configurations are batched and\n * applied at the end of the current execution block, right before sending the\n * response back to native.\n *\n * @param viewTag - The tag of the component you'd like to configure.\n * @param type - The type of the animation you'd like to configure -\n *   {@link LayoutAnimationType}.\n * @param config - The animation configuration - {@link LayoutAnimationFunction},\n *   {@link SharedTransitionAnimationsFunction}, {@link ProgressAnimationCallback}\n *   or {@link Keyframe}. Passing `undefined` will remove the animation.\n * @param sharedTransitionTag - The tag of the shared element transition you'd\n *   like to configure. Passing `undefined` will remove the transition.\n * @param isUnmounting - Determines whether the configuration should be included\n *   at the end of the batch, after all the non-deferred configurations (even\n *   those that were updated later). This is used to retain the correct ordering\n *   of shared elements. Defaults to `false`.\n */\nexport let updateLayoutAnimations: (\n  viewTag: number,\n  type: LayoutAnimationType,\n  config?:\n    | Keyframe\n    | LayoutAnimationFunction\n    | SharedTransitionAnimationsFunction\n    | ProgressAnimationCallback,\n  sharedTransitionTag?: string,\n  isUnmounting?: boolean\n) => void;\n\nif (shouldBeUseWeb()) {\n  updateLayoutAnimations = () => {\n    // no-op\n  };\n} else {\n  const updateLayoutAnimationsManager = createUpdateManager();\n  updateLayoutAnimations = (\n    viewTag,\n    type,\n    config,\n    sharedTransitionTag,\n    isUnmounting\n  ) =>\n    updateLayoutAnimationsManager.update(\n      {\n        viewTag,\n        type,\n        config: config ? makeShareableCloneRecursive(config) : undefined,\n        sharedTransitionTag,\n      },\n      isUnmounting\n    );\n}\n"],"mappings":"AAAA,YAAY,CAQZ,OACEA,6BAA6B,CAC7BC,2BAA2B,KACtB,WAAQ,CACf,OAASC,QAAQ,CAAEC,cAAc,KAAQ,sBAAmB,CAE5D,QAAS,CAAAC,mBAAmBA,CAAA,CAAG,CAC7B,GAAM,CAAAC,UAAsC,CAAG,EAAE,CAIjD,GAAM,CAAAC,kBAA8C,CAAG,EAAE,CAEzD,MAAO,CACLC,MAAM,SAAN,CAAAA,MAAMA,CAACC,SAAmC,CAAEC,YAAsB,CAAE,CAClE,GAAIA,YAAY,CAAE,CAChBH,kBAAkB,CAACI,IAAI,CAACF,SAAS,CAAC,CACpC,CAAC,IAAM,CACLH,UAAU,CAACK,IAAI,CAACF,SAAS,CAAC,CAC5B,CACA,GAAIH,UAAU,CAACM,MAAM,CAAGL,kBAAkB,CAACK,MAAM,GAAK,CAAC,CAAE,CACvDT,QAAQ,CAAC,CAAC,CAAG,IAAI,CAACU,KAAK,CAAC,CAAC,CAAGC,YAAY,CAAC,IAAI,CAACD,KAAK,CAAC,CACtD,CACF,CAAC,CACDA,KAAK,SAAL,CAAAA,KAAKA,CAAA,CAAa,CAChBZ,6BAA6B,CAACK,UAAU,CAACS,MAAM,CAACR,kBAAkB,CAAC,CAAC,CACpED,UAAU,CAACM,MAAM,CAAG,CAAC,CACrBL,kBAAkB,CAACK,MAAM,CAAG,CAAC,CAC/B,CACF,CAAC,CACH,CAqBA,MAAO,IAAI,CAAAI,sBAUF,CAET,GAAIZ,cAAc,CAAC,CAAC,CAAE,CACpBY,sBAAsB,CAAG,QAAzB,CAAAA,sBAAsBA,CAAA,CAAS,CAC7B,CACD,CACH,CAAC,IAAM,CACL,GAAM,CAAAC,6BAA6B,CAAGZ,mBAAmB,CAAC,CAAC,CAC3DW,sBAAsB,CAAG,QAAzB,CAAAA,sBAAsBA,CACpBE,OAAO,CACPC,IAAI,CACJC,MAAM,CACNC,mBAAmB,CACnBX,YAAY,QAEZ,CAAAO,6BAA6B,CAACT,MAAM,CAClC,CACEU,OAAO,CAAPA,OAAO,CACPC,IAAI,CAAJA,IAAI,CACJC,MAAM,CAAEA,MAAM,CAAGlB,2BAA2B,CAACkB,MAAM,CAAC,CAAGE,SAAS,CAChED,mBAAA,CAAAA,mBACF,CAAC,CACDX,YACF,CAAC,GACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}