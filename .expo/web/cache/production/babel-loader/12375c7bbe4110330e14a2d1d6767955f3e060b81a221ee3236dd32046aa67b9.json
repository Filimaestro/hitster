{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";import _defineProperty2 from\"@babel/runtime/helpers/defineProperty\";function _callSuper(t,o,e){return o=_getPrototypeOf(o),_possibleConstructorReturn(t,_isNativeReflectConstruct()?Reflect.construct(o,e||[],_getPrototypeOf(t).constructor):o.apply(t,e));}function _isNativeReflectConstruct(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));}catch(t){}return(_isNativeReflectConstruct=function _isNativeReflectConstruct(){return!!t;})();}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty2(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}var _UIManagerAny$getView,_UIManagerAny$getView2,_UIManagerAny$getCons;function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import UIManager from\"react-native-web/dist/exports/UIManager\";import DeviceEventEmitter from\"react-native-web/dist/exports/DeviceEventEmitter\";import{customDirectEventTypes}from'./customDirectEventTypes';import RNGestureHandlerModule from'../RNGestureHandlerModule';import{State}from'../State';import{handlerIDToTag,registerOldGestureHandler,unregisterOldGestureHandler}from'./handlersRegistry';import{getNextHandlerTag}from'./getNextHandlerTag';import{filterConfig,scheduleFlushOperations}from'./utils';import findNodeHandle from'../findNodeHandle';import{deepEqual,isFabric,isReact19,isTestEnv,tagMessage}from'../utils';import{ActionType}from'../ActionType';import{PressabilityDebugView}from'./PressabilityDebugView';import GestureHandlerRootViewContext from'../GestureHandlerRootViewContext';import{ghQueueMicrotask}from'../ghQueueMicrotask';import{MountRegistry}from'../mountRegistry';var UIManagerAny=UIManager;customDirectEventTypes.topGestureHandlerEvent={registrationName:'onGestureHandlerEvent'};var customGHEventsConfigFabricAndroid={topOnGestureHandlerEvent:{registrationName:'onGestureHandlerEvent'},topOnGestureHandlerStateChange:{registrationName:'onGestureHandlerStateChange'}};var customGHEventsConfig=_objectSpread({onGestureHandlerEvent:{registrationName:'onGestureHandlerEvent'},onGestureHandlerStateChange:{registrationName:'onGestureHandlerStateChange'}},isFabric()&&\"web\"==='android'&&customGHEventsConfigFabricAndroid);UIManagerAny.genericDirectEventTypes=_objectSpread(_objectSpread({},UIManagerAny.genericDirectEventTypes),customGHEventsConfig);var UIManagerConstants=(_UIManagerAny$getView=(_UIManagerAny$getView2=UIManagerAny.getViewManagerConfig)===null||_UIManagerAny$getView2===void 0?void 0:_UIManagerAny$getView2.call(UIManagerAny,'getConstants'))!==null&&_UIManagerAny$getView!==void 0?_UIManagerAny$getView:(_UIManagerAny$getCons=UIManagerAny.getConstants)===null||_UIManagerAny$getCons===void 0?void 0:_UIManagerAny$getCons.call(UIManagerAny);if(UIManagerConstants){UIManagerConstants.genericDirectEventTypes=_objectSpread(_objectSpread({},UIManagerConstants.genericDirectEventTypes),customGHEventsConfig);}var _UIManagerAny$setJSRe=UIManagerAny.setJSResponder,oldSetJSResponder=_UIManagerAny$setJSRe===void 0?function(){}:_UIManagerAny$setJSRe,_UIManagerAny$clearJS=UIManagerAny.clearJSResponder,oldClearJSResponder=_UIManagerAny$clearJS===void 0?function(){}:_UIManagerAny$clearJS;UIManagerAny.setJSResponder=function(tag,blockNativeResponder){RNGestureHandlerModule.handleSetJSResponder(tag,blockNativeResponder);oldSetJSResponder(tag,blockNativeResponder);};UIManagerAny.clearJSResponder=function(){RNGestureHandlerModule.handleClearJSResponder();oldClearJSResponder();};var allowTouches=true;var DEV_ON_ANDROID=false&&\"web\"==='android';if(DEV_ON_ANDROID){DeviceEventEmitter.addListener('toggleElementInspector',function(){allowTouches=!allowTouches;});}function hasUnresolvedRefs(props){var extract=function extract(refs){if(!Array.isArray(refs)){return refs&&refs.current===null;}return refs.some(function(r){return r&&r.current===null;});};return extract(props['simultaneousHandlers'])||extract(props['waitFor']);}var stateToPropMappings=_defineProperty2(_defineProperty2(_defineProperty2(_defineProperty2(_defineProperty2(_defineProperty2({},State.UNDETERMINED,undefined),State.BEGAN,'onBegan'),State.FAILED,'onFailed'),State.CANCELLED,'onCancelled'),State.ACTIVE,'onActivated'),State.END,'onEnded');var UNRESOLVED_REFS_RETRY_LIMIT=1;export default function createHandler(_ref){var name=_ref.name,_ref$allowedProps=_ref.allowedProps,allowedProps=_ref$allowedProps===void 0?[]:_ref$allowedProps,_ref$config=_ref.config,config=_ref$config===void 0?{}:_ref$config,transformProps=_ref.transformProps,_ref$customNativeProp=_ref.customNativeProps,customNativeProps=_ref$customNativeProp===void 0?[]:_ref$customNativeProp;var Handler=function(_React$Component){function Handler(props){var _this;_classCallCheck(this,Handler);_this=_callSuper(this,Handler,[props]);_defineProperty(_this,\"handlerTag\",void 0);_defineProperty(_this,\"config\",void 0);_defineProperty(_this,\"propsRef\",void 0);_defineProperty(_this,\"isMountedRef\",void 0);_defineProperty(_this,\"viewNode\",void 0);_defineProperty(_this,\"viewTag\",void 0);_defineProperty(_this,\"inspectorToggleListener\",void 0);_defineProperty(_this,\"onGestureHandlerEvent\",function(event){if(event.nativeEvent.handlerTag===_this.handlerTag){if(typeof _this.props.onGestureEvent==='function'){var _this$props$onGesture,_this$props;(_this$props$onGesture=(_this$props=_this.props).onGestureEvent)===null||_this$props$onGesture===void 0?void 0:_this$props$onGesture.call(_this$props,event);}}else{var _this$props$onGesture2,_this$props2;(_this$props$onGesture2=(_this$props2=_this.props).onGestureHandlerEvent)===null||_this$props$onGesture2===void 0?void 0:_this$props$onGesture2.call(_this$props2,event);}});_defineProperty(_this,\"onGestureHandlerStateChange\",function(event){if(event.nativeEvent.handlerTag===_this.handlerTag){if(typeof _this.props.onHandlerStateChange==='function'){var _this$props$onHandler,_this$props3;(_this$props$onHandler=(_this$props3=_this.props).onHandlerStateChange)===null||_this$props$onHandler===void 0?void 0:_this$props$onHandler.call(_this$props3,event);}var state=event.nativeEvent.state;var stateEventName=stateToPropMappings[state];var eventHandler=stateEventName&&_this.props[stateEventName];if(eventHandler&&typeof eventHandler==='function'){eventHandler(event);}}else{var _this$props$onGesture3,_this$props4;(_this$props$onGesture3=(_this$props4=_this.props).onGestureHandlerStateChange)===null||_this$props$onGesture3===void 0?void 0:_this$props$onGesture3.call(_this$props4,event);}});_defineProperty(_this,\"refHandler\",function(node){var _props;_this.viewNode=node;var child=React.Children.only(_this.props.children);var ref=isReact19()?(_props=child.props)===null||_props===void 0?void 0:_props.ref:child===null||child===void 0?void 0:child.ref;if(!ref){return;}if(typeof ref==='function'){ref(node);}else{ref.current=node;}});_defineProperty(_this,\"createGestureHandler\",function(newConfig){_this.config=newConfig;RNGestureHandlerModule.createGestureHandler(name,_this.handlerTag,newConfig);});_defineProperty(_this,\"attachGestureHandler\",function(newViewTag){_this.viewTag=newViewTag;if(\"web\"==='web'){RNGestureHandlerModule.attachGestureHandler(_this.handlerTag,newViewTag,ActionType.JS_FUNCTION_OLD_API,_this.propsRef);}else{registerOldGestureHandler(_this.handlerTag,{onGestureEvent:_this.onGestureHandlerEvent,onGestureStateChange:_this.onGestureHandlerStateChange});var actionType=function(){var _this$props5,_this$props6;var onGestureEvent=(_this$props5=_this.props)===null||_this$props5===void 0?void 0:_this$props5.onGestureEvent;var isGestureHandlerWorklet=onGestureEvent&&('current'in onGestureEvent||'workletEventHandler'in onGestureEvent);var onHandlerStateChange=(_this$props6=_this.props)===null||_this$props6===void 0?void 0:_this$props6.onHandlerStateChange;var isStateChangeHandlerWorklet=onHandlerStateChange&&('current'in onHandlerStateChange||'workletEventHandler'in onHandlerStateChange);var isReanimatedHandler=isGestureHandlerWorklet||isStateChangeHandlerWorklet;if(isReanimatedHandler){return ActionType.REANIMATED_WORKLET;}else if(onGestureEvent&&'__isNative'in onGestureEvent){return ActionType.NATIVE_ANIMATED_EVENT;}else{return ActionType.JS_FUNCTION_OLD_API;}}();RNGestureHandlerModule.attachGestureHandler(_this.handlerTag,newViewTag,actionType);}scheduleFlushOperations();ghQueueMicrotask(function(){MountRegistry.gestureHandlerWillMount(_this);});});_defineProperty(_this,\"updateGestureHandler\",function(newConfig){_this.config=newConfig;RNGestureHandlerModule.updateGestureHandler(_this.handlerTag,newConfig);scheduleFlushOperations();});_this.handlerTag=getNextHandlerTag();_this.config={};_this.propsRef=React.createRef();_this.isMountedRef=React.createRef();_this.state={allowTouches:allowTouches};if(props.id){if(handlerIDToTag[props.id]!==undefined){throw new Error(`Handler with ID \"${props.id}\" already registered`);}handlerIDToTag[props.id]=_this.handlerTag;}return _this;}_inherits(Handler,_React$Component);return _createClass(Handler,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;var props=this.props;this.isMountedRef.current=true;if(DEV_ON_ANDROID){this.inspectorToggleListener=DeviceEventEmitter.addListener('toggleElementInspector',function(){_this2.setState(function(_){return{allowTouches:allowTouches};});_this2.update(UNRESOLVED_REFS_RETRY_LIMIT);});}if(hasUnresolvedRefs(props)){ghQueueMicrotask(function(){_this2.update(UNRESOLVED_REFS_RETRY_LIMIT);});}this.createGestureHandler(filterConfig(transformProps?transformProps(this.props):this.props,[].concat(_toConsumableArray(allowedProps),_toConsumableArray(customNativeProps)),config));if(!this.viewNode){throw new Error(`[Gesture Handler] Failed to obtain view for ${Handler.displayName}. Note that old API doesn't support functional components.`);}this.attachGestureHandler(findNodeHandle(this.viewNode));}},{key:\"componentDidUpdate\",value:function componentDidUpdate(){var viewTag=findNodeHandle(this.viewNode);if(this.viewTag!==viewTag){this.attachGestureHandler(viewTag);}this.update(UNRESOLVED_REFS_RETRY_LIMIT);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){var _this$inspectorToggle;(_this$inspectorToggle=this.inspectorToggleListener)===null||_this$inspectorToggle===void 0?void 0:_this$inspectorToggle.remove();this.isMountedRef.current=false;if(\"web\"!=='web'){unregisterOldGestureHandler(this.handlerTag);}RNGestureHandlerModule.dropGestureHandler(this.handlerTag);scheduleFlushOperations();var handlerID=this.props.id;if(handlerID){delete handlerIDToTag[handlerID];}MountRegistry.gestureHandlerWillUnmount(this);}},{key:\"update\",value:function update(remainingTries){var _this3=this;if(!this.isMountedRef.current){return;}var props=this.props;if(hasUnresolvedRefs(props)&&remainingTries>0){ghQueueMicrotask(function(){_this3.update(remainingTries-1);});}else{var newConfig=filterConfig(transformProps?transformProps(this.props):this.props,[].concat(_toConsumableArray(allowedProps),_toConsumableArray(customNativeProps)),config);if(!deepEqual(this.config,newConfig)){this.updateGestureHandler(newConfig);}}}},{key:\"setNativeProps\",value:function setNativeProps(updates){var mergedProps=_objectSpread(_objectSpread({},this.props),updates);var newConfig=filterConfig(transformProps?transformProps(mergedProps):mergedProps,[].concat(_toConsumableArray(allowedProps),_toConsumableArray(customNativeProps)),config);this.updateGestureHandler(newConfig);}},{key:\"render\",value:function render(){var _this$props$testID;if(false&&!this.context&&!isTestEnv()&&\"web\"!=='web'){throw new Error(name+' must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.');}var gestureEventHandler=this.onGestureHandlerEvent;var _this$props7=this.props,onGestureEvent=_this$props7.onGestureEvent,onGestureHandlerEvent=_this$props7.onGestureHandlerEvent;if(onGestureEvent&&typeof onGestureEvent!=='function'){if(onGestureHandlerEvent){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}gestureEventHandler=onGestureEvent;}else{if(onGestureHandlerEvent&&typeof onGestureHandlerEvent!=='function'){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}}var gestureStateEventHandler=this.onGestureHandlerStateChange;var _this$props8=this.props,onHandlerStateChange=_this$props8.onHandlerStateChange,onGestureHandlerStateChange=_this$props8.onGestureHandlerStateChange;if(onHandlerStateChange&&typeof onHandlerStateChange!=='function'){if(onGestureHandlerStateChange){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}gestureStateEventHandler=onHandlerStateChange;}else{if(onGestureHandlerStateChange&&typeof onGestureHandlerStateChange!=='function'){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}}var events={onGestureHandlerEvent:this.state.allowTouches?gestureEventHandler:undefined,onGestureHandlerStateChange:this.state.allowTouches?gestureStateEventHandler:undefined};this.propsRef.current=events;var child=null;try{child=React.Children.only(this.props.children);}catch(e){throw new Error(tagMessage(`${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`));}var grandChildren=child.props.children;if(false&&child.type&&(child.type==='RNGestureHandlerButton'||child.type.name==='View'||child.type.displayName==='View')){grandChildren=React.Children.toArray(grandChildren);grandChildren.push(React.createElement(PressabilityDebugView,{key:\"pressabilityDebugView\",color:\"mediumspringgreen\",hitSlop:child.props.hitSlop}));}return React.cloneElement(child,_objectSpread(_objectSpread({ref:this.refHandler,collapsable:false},isTestEnv()?{handlerType:name,handlerTag:this.handlerTag,enabled:this.props.enabled}:{}),{},{testID:(_this$props$testID=this.props.testID)!==null&&_this$props$testID!==void 0?_this$props$testID:child.props.testID},events),grandChildren);}}]);}(React.Component);_defineProperty(Handler,\"displayName\",name);_defineProperty(Handler,\"contextType\",GestureHandlerRootViewContext);return Handler;}","map":{"version":3,"names":["React","Platform","UIManager","DeviceEventEmitter","customDirectEventTypes","RNGestureHandlerModule","State","handlerIDToTag","registerOldGestureHandler","unregisterOldGestureHandler","getNextHandlerTag","filterConfig","scheduleFlushOperations","findNodeHandle","deepEqual","isFabric","isReact19","isTestEnv","tagMessage","ActionType","PressabilityDebugView","GestureHandlerRootViewContext","ghQueueMicrotask","MountRegistry","UIManagerAny","topGestureHandlerEvent","registrationName","customGHEventsConfigFabricAndroid","topOnGestureHandlerEvent","topOnGestureHandlerStateChange","customGHEventsConfig","_objectSpread","onGestureHandlerEvent","onGestureHandlerStateChange","genericDirectEventTypes","UIManagerConstants","_UIManagerAny$getView","_UIManagerAny$getView2","getViewManagerConfig","call","_UIManagerAny$getCons","getConstants","_UIManagerAny$setJSRe","setJSResponder","oldSetJSResponder","_UIManagerAny$clearJS","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","handleSetJSResponder","handleClearJSResponder","allowTouches","DEV_ON_ANDROID","addListener","hasUnresolvedRefs","props","extract","refs","Array","isArray","current","some","r","stateToPropMappings","_defineProperty2","UNDETERMINED","undefined","BEGAN","FAILED","CANCELLED","ACTIVE","END","UNRESOLVED_REFS_RETRY_LIMIT","createHandler","_ref","name","_ref$allowedProps","allowedProps","_ref$config","config","transformProps","_ref$customNativeProp","customNativeProps","Handler","_React$Component","_this","_classCallCheck","_callSuper","_defineProperty","event","nativeEvent","handlerTag","onGestureEvent","_this$props$onGesture","_this$props","_this$props$onGesture2","_this$props2","onHandlerStateChange","_this$props$onHandler","_this$props3","state","stateEventName","eventHandler","_this$props$onGesture3","_this$props4","node","_props","viewNode","child","Children","only","children","ref","newConfig","createGestureHandler","newViewTag","viewTag","attachGestureHandler","JS_FUNCTION_OLD_API","propsRef","onGestureStateChange","actionType","_this$props5","_this$props6","isGestureHandlerWorklet","isStateChangeHandlerWorklet","isReanimatedHandler","REANIMATED_WORKLET","NATIVE_ANIMATED_EVENT","gestureHandlerWillMount","updateGestureHandler","createRef","isMountedRef","id","Error","_inherits","_createClass","key","value","componentDidMount","_this2","inspectorToggleListener","setState","_","update","concat","_toConsumableArray","displayName","componentDidUpdate","componentWillUnmount","_this$inspectorToggle","remove","dropGestureHandler","handlerID","gestureHandlerWillUnmount","remainingTries","_this3","setNativeProps","updates","mergedProps","render","_this$props$testID","context","gestureEventHandler","_this$props7","gestureStateEventHandler","_this$props8","events","e","grandChildren","type","toArray","push","createElement","color","hitSlop","cloneElement","refHandler","collapsable","handlerType","enabled","testID","Component"],"sources":["C:\\Users\\Jorn\\Documents\\hitster\\node_modules\\react-native-gesture-handler\\lib\\module\\handlers\\createHandler.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  UIManager,\n  DeviceEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\nimport { customDirectEventTypes } from './customDirectEventTypes';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport { State } from '../State';\nimport {\n  handlerIDToTag,\n  registerOldGestureHandler,\n  unregisterOldGestureHandler,\n} from './handlersRegistry';\nimport { getNextHandlerTag } from './getNextHandlerTag';\n\nimport {\n  BaseGestureHandlerProps,\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from './gestureHandlerCommon';\nimport { filterConfig, scheduleFlushOperations } from './utils';\nimport findNodeHandle from '../findNodeHandle';\nimport { ValueOf } from '../typeUtils';\nimport {\n  deepEqual,\n  isFabric,\n  isReact19,\n  isTestEnv,\n  tagMessage,\n} from '../utils';\nimport { ActionType } from '../ActionType';\nimport { PressabilityDebugView } from './PressabilityDebugView';\nimport GestureHandlerRootViewContext from '../GestureHandlerRootViewContext';\nimport { ghQueueMicrotask } from '../ghQueueMicrotask';\nimport { MountRegistry } from '../mountRegistry';\nimport { ReactElement } from 'react';\n\nconst UIManagerAny = UIManager as any;\n\ncustomDirectEventTypes.topGestureHandlerEvent = {\n  registrationName: 'onGestureHandlerEvent',\n};\n\nconst customGHEventsConfigFabricAndroid = {\n  topOnGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  topOnGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n\n  // When using React Native Gesture Handler for Animated.event with useNativeDriver: true\n  // on Android with Fabric enabled, the native part still sends the native events to JS\n  // but prefixed with \"top\". We cannot simply rename the events above so they are prefixed\n  // with \"top\" instead of \"on\" because in such case Animated.events would not be registered.\n  // That's why we need to register another pair of event names.\n  // The incoming events will be queued but never handled.\n  // Without this piece of code below, you'll get the following JS error:\n  // Unsupported top level event type \"topOnGestureHandlerEvent\" dispatched\n  ...(isFabric() &&\n    Platform.OS === 'android' &&\n    customGHEventsConfigFabricAndroid),\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n  ...UIManagerAny.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManagerAny.getViewManagerConfig?.('getConstants') ??\n  UIManagerAny.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    // no-op\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    // no-op\n  },\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\n// Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<HandlerPropsT extends Record<string, unknown>> =\n  Readonly<{\n    name: string;\n    allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n    config: Readonly<Record<string, unknown>>;\n    transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n    customNativeProps?: Readonly<string[]>;\n  }>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\ntype AttachGestureHandlerWeb = (\n  handlerTag: number,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  newView: any,\n  _actionType: ActionType,\n  propsRef: React.RefObject<unknown>\n) => void;\n\nconst UNRESOLVED_REFS_RETRY_LIMIT = 1;\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>,\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  interface HandlerState {\n    allowTouches: boolean;\n  }\n  class Handler extends React.Component<\n    T & InternalEventHandlers,\n    HandlerState\n  > {\n    static displayName = name;\n    static contextType = GestureHandlerRootViewContext;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private isMountedRef: React.MutableRefObject<boolean | null>;\n    private viewNode: any;\n    private viewTag?: number;\n    private inspectorToggleListener?: EmitterSubscription;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = getNextHandlerTag();\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.isMountedRef = React.createRef();\n      this.state = { allowTouches };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n      this.isMountedRef.current = true;\n\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\n          'toggleElementInspector',\n          () => {\n            this.setState((_) => ({ allowTouches }));\n            this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n          }\n        );\n      }\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // queueMicrotask. This makes it so update() function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        ghQueueMicrotask(() => {\n          this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      if (!this.viewNode) {\n        throw new Error(\n          `[Gesture Handler] Failed to obtain view for ${Handler.displayName}. Note that old API doesn't support functional components.`\n        );\n      }\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n    }\n\n    componentWillUnmount() {\n      this.inspectorToggleListener?.remove();\n      this.isMountedRef.current = false;\n      if (Platform.OS !== 'web') {\n        unregisterOldGestureHandler(this.handlerTag);\n      }\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      scheduleFlushOperations();\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n\n      MountRegistry.gestureHandlerWillUnmount(this);\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onGestureEvent === 'function') {\n          this.props.onGestureEvent?.(event);\n        }\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onHandlerStateChange === 'function') {\n          this.props.onHandlerStateChange?.(event);\n        }\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // @ts-ignore Since React 19 ref is accessible as standard prop\n      // https://react.dev/blog/2024/04/25/react-19-upgrade-guide#deprecated-element-ref\n      const ref = isReact19() ? (child as ReactElement).props?.ref : child?.ref;\n\n      if (!ref) {\n        return;\n      }\n\n      if (typeof ref === 'function') {\n        ref(node);\n      } else {\n        ref.current = node;\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // Typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (\n          RNGestureHandlerModule.attachGestureHandler as AttachGestureHandlerWeb\n        )(\n          this.handlerTag,\n          newViewTag,\n          ActionType.JS_FUNCTION_OLD_API, // ignored on web\n          this.propsRef\n        );\n      } else {\n        registerOldGestureHandler(this.handlerTag, {\n          onGestureEvent: this.onGestureHandlerEvent,\n          onGestureStateChange: this.onGestureHandlerStateChange,\n        });\n\n        const actionType = (() => {\n          const onGestureEvent = this.props?.onGestureEvent;\n          const isGestureHandlerWorklet =\n            onGestureEvent &&\n            ('current' in onGestureEvent ||\n              'workletEventHandler' in onGestureEvent);\n          const onHandlerStateChange = this.props?.onHandlerStateChange;\n          const isStateChangeHandlerWorklet =\n            onHandlerStateChange &&\n            ('current' in onHandlerStateChange ||\n              'workletEventHandler' in onHandlerStateChange);\n          const isReanimatedHandler =\n            isGestureHandlerWorklet || isStateChangeHandlerWorklet;\n          if (isReanimatedHandler) {\n            // Reanimated worklet\n            return ActionType.REANIMATED_WORKLET;\n          } else if (onGestureEvent && '__isNative' in onGestureEvent) {\n            // Animated.event with useNativeDriver: true\n            return ActionType.NATIVE_ANIMATED_EVENT;\n          } else {\n            // JS callback or Animated.event with useNativeDriver: false\n            return ActionType.JS_FUNCTION_OLD_API;\n          }\n        })();\n\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag,\n          actionType\n        );\n      }\n\n      scheduleFlushOperations();\n\n      ghQueueMicrotask(() => {\n        MountRegistry.gestureHandlerWillMount(this);\n      });\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n      scheduleFlushOperations();\n    };\n\n    private update(remainingTries: number) {\n      if (!this.isMountedRef.current) {\n        return;\n      }\n\n      const props: HandlerProps<U> = this.props;\n\n      // When ref is set via a function i.e. `ref={(r) => refObject.current = r}` instead of\n      // `ref={refObject}` it's possible that it won't be resolved in time. Seems like trying\n      // again is easy enough fix.\n      if (hasUnresolvedRefs(props) && remainingTries > 0) {\n        ghQueueMicrotask(() => {\n          this.update(remainingTries - 1);\n        });\n      } else {\n        const newConfig = filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        );\n        if (!deepEqual(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      if (__DEV__ && !this.context && !isTestEnv() && Platform.OS !== 'web') {\n        throw new Error(\n          name +\n            ' must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.'\n        );\n      }\n\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const { onGestureEvent, onGestureHandlerEvent }: OnGestureEventHandlers =\n        this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches\n          ? gestureEventHandler\n          : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches\n          ? gestureStateEventHandler\n          : undefined,\n      };\n\n      this.propsRef.current = events;\n\n      let child: any = null;\n      try {\n        child = React.Children.only(this.props.children);\n      } catch (e) {\n        throw new Error(\n          tagMessage(\n            `${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`\n          )\n        );\n      }\n\n      let grandChildren = child.props.children;\n      if (\n        __DEV__ &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          <PressabilityDebugView\n            key=\"pressabilityDebugView\"\n            color=\"mediumspringgreen\"\n            hitSlop={child.props.hitSlop}\n          />\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...(isTestEnv()\n            ? {\n                handlerType: name,\n                handlerTag: this.handlerTag,\n                enabled: this.props.enabled,\n              }\n            : {}),\n          testID: this.props.testID ?? child.props.testID,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}