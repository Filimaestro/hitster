{"ast":null,"code":"'use strict';import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import{SensorType}from\"./commonTypes.js\";import{makeMutable}from\"./mutables.js\";import{ReanimatedModule}from'./ReanimatedModule';function initSensorData(sensorType){if(sensorType===SensorType.ROTATION){return makeMutable({qw:0,qx:0,qy:0,qz:0,yaw:0,pitch:0,roll:0,interfaceOrientation:0});}else{return makeMutable({x:0,y:0,z:0,interfaceOrientation:0});}}var Sensor=function(){function Sensor(sensorType,config){_classCallCheck(this,Sensor);this.listenersNumber=0;this.sensorId=null;this.sensorType=sensorType;this.config=config;this.data=initSensorData(sensorType);}return _createClass(Sensor,[{key:\"register\",value:function register(eventHandler){var config=this.config;var sensorType=this.sensorType;this.sensorId=ReanimatedModule.registerSensor(sensorType,config.interval==='auto'?-1:config.interval,config.iosReferenceFrame,eventHandler);return this.sensorId!==-1;}},{key:\"isRunning\",value:function isRunning(){return this.sensorId!==-1&&this.sensorId!==null;}},{key:\"isAvailable\",value:function isAvailable(){return this.sensorId!==-1;}},{key:\"getSharedValue\",value:function getSharedValue(){return this.data;}},{key:\"unregister\",value:function unregister(){if(this.sensorId!==null&&this.sensorId!==-1){ReanimatedModule.unregisterSensor(this.sensorId);}this.sensorId=null;}}]);}();export{Sensor as default};","map":{"version":3,"names":["_classCallCheck","_createClass","SensorType","makeMutable","ReanimatedModule","initSensorData","sensorType","ROTATION","qw","qx","qy","qz","yaw","pitch","roll","interfaceOrientation","x","y","z","Sensor","config","listenersNumber","sensorId","data","key","value","register","eventHandler","registerSensor","interval","iosReferenceFrame","isRunning","isAvailable","getSharedValue","unregister","unregisterSensor","default"],"sources":["C:\\Users\\Jorn\\Documents\\hitster\\node_modules\\react-native-reanimated\\src\\Sensor.ts"],"sourcesContent":["'use strict';\nimport type {\n  SensorConfig,\n  ShareableRef,\n  SharedValue,\n  Value3D,\n  ValueRotation,\n  WorkletFunction,\n} from './commonTypes';\nimport { SensorType } from './commonTypes';\nimport { makeMutable } from './mutables';\nimport { ReanimatedModule } from './ReanimatedModule';\n\nfunction initSensorData(\n  sensorType: SensorType\n): SharedValue<Value3D | ValueRotation> {\n  if (sensorType === SensorType.ROTATION) {\n    return makeMutable<Value3D | ValueRotation>({\n      qw: 0,\n      qx: 0,\n      qy: 0,\n      qz: 0,\n      yaw: 0,\n      pitch: 0,\n      roll: 0,\n      interfaceOrientation: 0,\n    });\n  } else {\n    return makeMutable<Value3D | ValueRotation>({\n      x: 0,\n      y: 0,\n      z: 0,\n      interfaceOrientation: 0,\n    });\n  }\n}\n\nexport default class Sensor {\n  public listenersNumber = 0;\n  private sensorId: number | null = null;\n  private sensorType: SensorType;\n  private data: SharedValue<Value3D | ValueRotation>;\n  private config: SensorConfig;\n\n  constructor(sensorType: SensorType, config: SensorConfig) {\n    this.sensorType = sensorType;\n    this.config = config;\n    this.data = initSensorData(sensorType);\n  }\n\n  register(\n    eventHandler: ShareableRef<(data: Value3D | ValueRotation) => void>\n  ) {\n    const config = this.config;\n    const sensorType = this.sensorType;\n    this.sensorId = ReanimatedModule.registerSensor(\n      sensorType,\n      config.interval === 'auto' ? -1 : config.interval,\n      config.iosReferenceFrame,\n      eventHandler as ShareableRef<WorkletFunction>\n    );\n    return this.sensorId !== -1;\n  }\n\n  isRunning() {\n    return this.sensorId !== -1 && this.sensorId !== null;\n  }\n\n  isAvailable() {\n    return this.sensorId !== -1;\n  }\n\n  getSharedValue() {\n    return this.data;\n  }\n\n  unregister() {\n    if (this.sensorId !== null && this.sensorId !== -1) {\n      ReanimatedModule.unregisterSensor(this.sensorId);\n    }\n    this.sensorId = null;\n  }\n}\n"],"mappings":"AAAA,YAAY,QAAAA,eAAA,oDAAAC,YAAA,0CASZ,OAASC,UAAU,KAAQ,kBAAe,CAC1C,OAASC,WAAW,KAAQ,eAAY,CACxC,OAASC,gBAAgB,KAAQ,oBAAoB,CAErD,QAAS,CAAAC,cAAcA,CACrBC,UAAsB,CACgB,CACtC,GAAIA,UAAU,GAAKJ,UAAU,CAACK,QAAQ,CAAE,CACtC,MAAO,CAAAJ,WAAW,CAA0B,CAC1CK,EAAE,CAAE,CAAC,CACLC,EAAE,CAAE,CAAC,CACLC,EAAE,CAAE,CAAC,CACLC,EAAE,CAAE,CAAC,CACLC,GAAG,CAAE,CAAC,CACNC,KAAK,CAAE,CAAC,CACRC,IAAI,CAAE,CAAC,CACPC,oBAAoB,CAAE,CACxB,CAAC,CAAC,CACJ,CAAC,IAAM,CACL,MAAO,CAAAZ,WAAW,CAA0B,CAC1Ca,CAAC,CAAE,CAAC,CACJC,CAAC,CAAE,CAAC,CACJC,CAAC,CAAE,CAAC,CACJH,oBAAoB,CAAE,CACxB,CAAC,CAAC,CACJ,CACF,IAEqB,CAAAI,MAAM,YAOzB,SAAAA,OAAYb,UAAsB,CAAEc,MAAoB,CAAE,CAAApB,eAAA,MAAAmB,MAAA,OANnDE,eAAe,CAAG,CAAC,MAClBC,QAAQ,CAAkB,IAAI,CAMpC,IAAI,CAAChB,UAAU,CAAGA,UAAU,CAC5B,IAAI,CAACc,MAAM,CAAGA,MAAM,CACpB,IAAI,CAACG,IAAI,CAAGlB,cAAc,CAACC,UAAU,CAAC,CACxC,QAAAL,YAAA,CAAAkB,MAAA,GAAAK,GAAA,YAAAC,KAAA,CAEA,SAAAC,QAAQA,CACNC,YAAmE,CACnE,CACA,GAAM,CAAAP,MAAM,CAAG,IAAI,CAACA,MAAM,CAC1B,GAAM,CAAAd,UAAU,CAAG,IAAI,CAACA,UAAU,CAClC,IAAI,CAACgB,QAAQ,CAAGlB,gBAAgB,CAACwB,cAAc,CAC7CtB,UAAU,CACVc,MAAM,CAACS,QAAQ,GAAK,MAAM,CAAG,CAAC,CAAC,CAAGT,MAAM,CAACS,QAAQ,CACjDT,MAAM,CAACU,iBAAiB,CACxBH,YACF,CAAC,CACD,MAAO,KAAI,CAACL,QAAQ,GAAK,CAAC,CAAC,CAC7B,IAAAE,GAAA,aAAAC,KAAA,CAEA,SAAAM,SAASA,CAAA,CAAG,CACV,MAAO,KAAI,CAACT,QAAQ,GAAK,CAAC,CAAC,EAAI,IAAI,CAACA,QAAQ,GAAK,IAAI,CACvD,IAAAE,GAAA,eAAAC,KAAA,CAEA,SAAAO,WAAWA,CAAA,CAAG,CACZ,MAAO,KAAI,CAACV,QAAQ,GAAK,CAAC,CAAC,CAC7B,IAAAE,GAAA,kBAAAC,KAAA,CAEA,SAAAQ,cAAcA,CAAA,CAAG,CACf,MAAO,KAAI,CAACV,IAAI,CAClB,IAAAC,GAAA,cAAAC,KAAA,CAEA,SAAAS,UAAUA,CAAA,CAAG,CACX,GAAI,IAAI,CAACZ,QAAQ,GAAK,IAAI,EAAI,IAAI,CAACA,QAAQ,GAAK,CAAC,CAAC,CAAE,CAClDlB,gBAAgB,CAAC+B,gBAAgB,CAAC,IAAI,CAACb,QAAQ,CAAC,CAClD,CACA,IAAI,CAACA,QAAQ,CAAG,IAAI,CACtB,gBA5CmBH,MAAM,IAAAiB,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}