{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import{PointerType}from'../../PointerType';import{State}from'../../State';import PointerTracker from'./PointerTracker';var GestureHandlerOrchestrator=function(){function GestureHandlerOrchestrator(){_classCallCheck(this,GestureHandlerOrchestrator);_defineProperty(this,\"gestureHandlers\",[]);_defineProperty(this,\"awaitingHandlers\",[]);_defineProperty(this,\"awaitingHandlersTags\",new Set());_defineProperty(this,\"handlingChangeSemaphore\",0);_defineProperty(this,\"activationIndex\",0);}return _createClass(GestureHandlerOrchestrator,[{key:\"scheduleFinishedHandlersCleanup\",value:function scheduleFinishedHandlersCleanup(){if(this.handlingChangeSemaphore===0){this.cleanupFinishedHandlers();}}},{key:\"cleanHandler\",value:function cleanHandler(handler){handler.reset();handler.active=false;handler.awaiting=false;handler.activationIndex=Number.MAX_VALUE;}},{key:\"removeHandlerFromOrchestrator\",value:function removeHandlerFromOrchestrator(handler){var indexInGestureHandlers=this.gestureHandlers.indexOf(handler);var indexInAwaitingHandlers=this.awaitingHandlers.indexOf(handler);if(indexInGestureHandlers>=0){this.gestureHandlers.splice(indexInGestureHandlers,1);}if(indexInAwaitingHandlers>=0){this.awaitingHandlers.splice(indexInAwaitingHandlers,1);this.awaitingHandlersTags.delete(handler.handlerTag);}}},{key:\"cleanupFinishedHandlers\",value:function cleanupFinishedHandlers(){var handlersToRemove=new Set();for(var i=this.gestureHandlers.length-1;i>=0;--i){var handler=this.gestureHandlers[i];if(this.isFinished(handler.state)&&!handler.awaiting){this.cleanHandler(handler);handlersToRemove.add(handler);}}this.gestureHandlers=this.gestureHandlers.filter(function(handler){return!handlersToRemove.has(handler);});}},{key:\"hasOtherHandlerToWaitFor\",value:function hasOtherHandlerToWaitFor(handler){var _this=this;var hasToWaitFor=function hasToWaitFor(otherHandler){return!_this.isFinished(otherHandler.state)&&_this.shouldHandlerWaitForOther(handler,otherHandler);};return this.gestureHandlers.some(hasToWaitFor);}},{key:\"shouldBeCancelledByFinishedHandler\",value:function shouldBeCancelledByFinishedHandler(handler){var _this2=this;var shouldBeCancelled=function shouldBeCancelled(otherHandler){return _this2.shouldHandlerWaitForOther(handler,otherHandler)&&otherHandler.state===State.END;};return this.gestureHandlers.some(shouldBeCancelled);}},{key:\"tryActivate\",value:function tryActivate(handler){if(this.shouldBeCancelledByFinishedHandler(handler)){handler.cancel();return;}if(this.hasOtherHandlerToWaitFor(handler)){this.addAwaitingHandler(handler);return;}var handlerState=handler.state;if(handlerState===State.CANCELLED||handlerState===State.FAILED){return;}if(this.shouldActivate(handler)){this.makeActive(handler);return;}if(handlerState===State.ACTIVE){handler.fail();return;}if(handlerState===State.BEGAN){handler.cancel();}}},{key:\"shouldActivate\",value:function shouldActivate(handler){var _this3=this;var shouldBeCancelledBy=function shouldBeCancelledBy(otherHandler){return _this3.shouldHandlerBeCancelledBy(handler,otherHandler);};return!this.gestureHandlers.some(shouldBeCancelledBy);}},{key:\"cleanupAwaitingHandlers\",value:function cleanupAwaitingHandlers(handler){var _this4=this;var shouldWait=function shouldWait(otherHandler){return!otherHandler.awaiting&&_this4.shouldHandlerWaitForOther(otherHandler,handler);};for(var otherHandler of this.awaitingHandlers){if(shouldWait(otherHandler)){this.cleanHandler(otherHandler);this.awaitingHandlersTags.delete(otherHandler.handlerTag);}}this.awaitingHandlers=this.awaitingHandlers.filter(function(otherHandler){return _this4.awaitingHandlersTags.has(otherHandler.handlerTag);});}},{key:\"onHandlerStateChange\",value:function onHandlerStateChange(handler,newState,oldState,sendIfDisabled){if(!handler.enabled&&!sendIfDisabled){return;}this.handlingChangeSemaphore+=1;if(this.isFinished(newState)){for(var otherHandler of this.awaitingHandlers){if(!this.shouldHandlerWaitForOther(otherHandler,handler)||!this.awaitingHandlersTags.has(otherHandler.handlerTag)){continue;}if(newState!==State.END){this.tryActivate(otherHandler);continue;}otherHandler.cancel();if(otherHandler.state===State.END){otherHandler.sendEvent(State.CANCELLED,State.BEGAN);}otherHandler.awaiting=false;}}if(newState===State.ACTIVE){this.tryActivate(handler);}else if(oldState===State.ACTIVE||oldState===State.END){if(handler.active){handler.sendEvent(newState,oldState);}else if(oldState===State.ACTIVE&&(newState===State.CANCELLED||newState===State.FAILED)){handler.sendEvent(newState,State.BEGAN);}}else if(oldState!==State.UNDETERMINED||newState!==State.CANCELLED){handler.sendEvent(newState,oldState);}this.handlingChangeSemaphore-=1;this.scheduleFinishedHandlersCleanup();if(!this.awaitingHandlers.includes(handler)){this.cleanupAwaitingHandlers(handler);}}},{key:\"makeActive\",value:function makeActive(handler){var currentState=handler.state;handler.active=true;handler.shouldResetProgress=true;handler.activationIndex=this.activationIndex++;for(var i=this.gestureHandlers.length-1;i>=0;--i){if(this.shouldHandlerBeCancelledBy(this.gestureHandlers[i],handler)){this.gestureHandlers[i].cancel();}}for(var otherHandler of this.awaitingHandlers){if(this.shouldHandlerBeCancelledBy(otherHandler,handler)){otherHandler.awaiting=false;}}handler.sendEvent(State.ACTIVE,State.BEGAN);if(currentState!==State.ACTIVE){handler.sendEvent(State.END,State.ACTIVE);if(currentState!==State.END){handler.sendEvent(State.UNDETERMINED,State.END);}}if(!handler.awaiting){return;}handler.awaiting=false;this.awaitingHandlers=this.awaitingHandlers.filter(function(otherHandler){return otherHandler!==handler;});}},{key:\"addAwaitingHandler\",value:function addAwaitingHandler(handler){if(this.awaitingHandlers.includes(handler)){return;}this.awaitingHandlers.push(handler);this.awaitingHandlersTags.add(handler.handlerTag);handler.awaiting=true;handler.activationIndex=this.activationIndex++;}},{key:\"recordHandlerIfNotPresent\",value:function recordHandlerIfNotPresent(handler){if(this.gestureHandlers.includes(handler)){return;}this.gestureHandlers.push(handler);handler.active=false;handler.awaiting=false;handler.activationIndex=Number.MAX_SAFE_INTEGER;}},{key:\"shouldHandlerWaitForOther\",value:function shouldHandlerWaitForOther(handler,otherHandler){return handler!==otherHandler&&(handler.shouldWaitForHandlerFailure(otherHandler)||otherHandler.shouldRequireToWaitForFailure(handler));}},{key:\"canRunSimultaneously\",value:function canRunSimultaneously(gh1,gh2){return gh1===gh2||gh1.shouldRecognizeSimultaneously(gh2)||gh2.shouldRecognizeSimultaneously(gh1);}},{key:\"shouldHandlerBeCancelledBy\",value:function shouldHandlerBeCancelledBy(handler,otherHandler){if(this.canRunSimultaneously(handler,otherHandler)){return false;}if(handler.awaiting||handler.state===State.ACTIVE){return handler.shouldBeCancelledByOther(otherHandler);}var handlerPointers=handler.getTrackedPointersID();var otherPointers=otherHandler.getTrackedPointersID();if(!PointerTracker.shareCommonPointers(handlerPointers,otherPointers)&&handler.delegate.view!==otherHandler.delegate.view){return this.checkOverlap(handler,otherHandler);}return true;}},{key:\"checkOverlap\",value:function checkOverlap(handler,otherHandler){var isPointerWithinBothBounds=function isPointerWithinBothBounds(pointer){var point=handler.tracker.getLastAbsoluteCoords(pointer);return handler.delegate.isPointerInBounds(point)&&otherHandler.delegate.isPointerInBounds(point);};return handler.getTrackedPointersID().some(isPointerWithinBothBounds);}},{key:\"isFinished\",value:function isFinished(state){return state===State.END||state===State.FAILED||state===State.CANCELLED;}},{key:\"cancelMouseAndPenGestures\",value:function cancelMouseAndPenGestures(currentHandler){this.gestureHandlers.forEach(function(handler){if(handler.pointerType!==PointerType.MOUSE&&handler.pointerType!==PointerType.STYLUS){return;}if(handler!==currentHandler){handler.cancel();}else{handler.tracker.resetTracker();}});}}],[{key:\"instance\",get:function get(){if(!GestureHandlerOrchestrator._instance){GestureHandlerOrchestrator._instance=new GestureHandlerOrchestrator();}return GestureHandlerOrchestrator._instance;}}]);}();export{GestureHandlerOrchestrator as default};_defineProperty(GestureHandlerOrchestrator,\"_instance\",void 0);","map":{"version":3,"names":["PointerType","State","PointerTracker","GestureHandlerOrchestrator","_classCallCheck","_defineProperty","Set","_createClass","key","value","scheduleFinishedHandlersCleanup","handlingChangeSemaphore","cleanupFinishedHandlers","cleanHandler","handler","reset","active","awaiting","activationIndex","Number","MAX_VALUE","removeHandlerFromOrchestrator","indexInGestureHandlers","gestureHandlers","indexOf","indexInAwaitingHandlers","awaitingHandlers","splice","awaitingHandlersTags","delete","handlerTag","handlersToRemove","i","length","isFinished","state","add","filter","has","hasOtherHandlerToWaitFor","_this","hasToWaitFor","otherHandler","shouldHandlerWaitForOther","some","shouldBeCancelledByFinishedHandler","_this2","shouldBeCancelled","END","tryActivate","cancel","addAwaitingHandler","handlerState","CANCELLED","FAILED","shouldActivate","makeActive","ACTIVE","fail","BEGAN","_this3","shouldBeCancelledBy","shouldHandlerBeCancelledBy","cleanupAwaitingHandlers","_this4","shouldWait","onHandlerStateChange","newState","oldState","sendIfDisabled","enabled","sendEvent","UNDETERMINED","includes","currentState","shouldResetProgress","push","recordHandlerIfNotPresent","MAX_SAFE_INTEGER","shouldWaitForHandlerFailure","shouldRequireToWaitForFailure","canRunSimultaneously","gh1","gh2","shouldRecognizeSimultaneously","shouldBeCancelledByOther","handlerPointers","getTrackedPointersID","otherPointers","shareCommonPointers","delegate","view","checkOverlap","isPointerWithinBothBounds","pointer","point","tracker","getLastAbsoluteCoords","isPointerInBounds","cancelMouseAndPenGestures","currentHandler","forEach","pointerType","MOUSE","STYLUS","resetTracker","get","_instance","default"],"sources":["C:\\Users\\Jorn\\Documents\\hitster\\node_modules\\react-native-gesture-handler\\lib\\module\\web\\tools\\GestureHandlerOrchestrator.ts"],"sourcesContent":["import { PointerType } from '../../PointerType';\nimport { State } from '../../State';\n\nimport type IGestureHandler from '../handlers/IGestureHandler';\nimport PointerTracker from './PointerTracker';\n\nexport default class GestureHandlerOrchestrator {\n  private static _instance: GestureHandlerOrchestrator;\n\n  private gestureHandlers: IGestureHandler[] = [];\n  private awaitingHandlers: IGestureHandler[] = [];\n  private awaitingHandlersTags: Set<number> = new Set();\n\n  private handlingChangeSemaphore = 0;\n  private activationIndex = 0;\n\n  // Private beacuse of Singleton\n  // eslint-disable-next-line no-useless-constructor, @typescript-eslint/no-empty-function\n  private constructor() {}\n\n  private scheduleFinishedHandlersCleanup(): void {\n    if (this.handlingChangeSemaphore === 0) {\n      this.cleanupFinishedHandlers();\n    }\n  }\n\n  private cleanHandler(handler: IGestureHandler): void {\n    handler.reset();\n    handler.active = false;\n    handler.awaiting = false;\n    handler.activationIndex = Number.MAX_VALUE;\n  }\n\n  public removeHandlerFromOrchestrator(handler: IGestureHandler): void {\n    const indexInGestureHandlers = this.gestureHandlers.indexOf(handler);\n    const indexInAwaitingHandlers = this.awaitingHandlers.indexOf(handler);\n\n    if (indexInGestureHandlers >= 0) {\n      this.gestureHandlers.splice(indexInGestureHandlers, 1);\n    }\n\n    if (indexInAwaitingHandlers >= 0) {\n      this.awaitingHandlers.splice(indexInAwaitingHandlers, 1);\n      this.awaitingHandlersTags.delete(handler.handlerTag);\n    }\n  }\n\n  private cleanupFinishedHandlers(): void {\n    const handlersToRemove = new Set<IGestureHandler>();\n\n    for (let i = this.gestureHandlers.length - 1; i >= 0; --i) {\n      const handler = this.gestureHandlers[i];\n\n      if (this.isFinished(handler.state) && !handler.awaiting) {\n        this.cleanHandler(handler);\n        handlersToRemove.add(handler);\n      }\n    }\n\n    this.gestureHandlers = this.gestureHandlers.filter(\n      (handler) => !handlersToRemove.has(handler)\n    );\n  }\n\n  private hasOtherHandlerToWaitFor(handler: IGestureHandler): boolean {\n    const hasToWaitFor = (otherHandler: IGestureHandler) => {\n      return (\n        !this.isFinished(otherHandler.state) &&\n        this.shouldHandlerWaitForOther(handler, otherHandler)\n      );\n    };\n\n    return this.gestureHandlers.some(hasToWaitFor);\n  }\n\n  private shouldBeCancelledByFinishedHandler(\n    handler: IGestureHandler\n  ): boolean {\n    const shouldBeCancelled = (otherHandler: IGestureHandler) => {\n      return (\n        this.shouldHandlerWaitForOther(handler, otherHandler) &&\n        otherHandler.state === State.END\n      );\n    };\n\n    return this.gestureHandlers.some(shouldBeCancelled);\n  }\n\n  private tryActivate(handler: IGestureHandler): void {\n    if (this.shouldBeCancelledByFinishedHandler(handler)) {\n      handler.cancel();\n      return;\n    }\n\n    if (this.hasOtherHandlerToWaitFor(handler)) {\n      this.addAwaitingHandler(handler);\n      return;\n    }\n\n    const handlerState = handler.state;\n\n    if (handlerState === State.CANCELLED || handlerState === State.FAILED) {\n      return;\n    }\n\n    if (this.shouldActivate(handler)) {\n      this.makeActive(handler);\n      return;\n    }\n\n    if (handlerState === State.ACTIVE) {\n      handler.fail();\n      return;\n    }\n\n    if (handlerState === State.BEGAN) {\n      handler.cancel();\n    }\n  }\n\n  private shouldActivate(handler: IGestureHandler): boolean {\n    const shouldBeCancelledBy = (otherHandler: IGestureHandler) => {\n      return this.shouldHandlerBeCancelledBy(handler, otherHandler);\n    };\n\n    return !this.gestureHandlers.some(shouldBeCancelledBy);\n  }\n\n  private cleanupAwaitingHandlers(handler: IGestureHandler): void {\n    const shouldWait = (otherHandler: IGestureHandler) => {\n      return (\n        !otherHandler.awaiting &&\n        this.shouldHandlerWaitForOther(otherHandler, handler)\n      );\n    };\n\n    for (const otherHandler of this.awaitingHandlers) {\n      if (shouldWait(otherHandler)) {\n        this.cleanHandler(otherHandler);\n        this.awaitingHandlersTags.delete(otherHandler.handlerTag);\n      }\n    }\n\n    this.awaitingHandlers = this.awaitingHandlers.filter((otherHandler) =>\n      this.awaitingHandlersTags.has(otherHandler.handlerTag)\n    );\n  }\n\n  public onHandlerStateChange(\n    handler: IGestureHandler,\n    newState: State,\n    oldState: State,\n    sendIfDisabled?: boolean\n  ): void {\n    if (!handler.enabled && !sendIfDisabled) {\n      return;\n    }\n\n    this.handlingChangeSemaphore += 1;\n\n    if (this.isFinished(newState)) {\n      for (const otherHandler of this.awaitingHandlers) {\n        if (\n          !this.shouldHandlerWaitForOther(otherHandler, handler) ||\n          !this.awaitingHandlersTags.has(otherHandler.handlerTag)\n        ) {\n          continue;\n        }\n\n        if (newState !== State.END) {\n          this.tryActivate(otherHandler);\n          continue;\n        }\n\n        otherHandler.cancel();\n\n        if (otherHandler.state === State.END) {\n          // Handle edge case, where discrete gestures end immediately after activation thus\n          // their state is set to END and when the gesture they are waiting for activates they\n          // should be cancelled, however `cancel` was never sent as gestures were already in the END state.\n          // Send synthetic BEGAN -> CANCELLED to properly handle JS logic\n          otherHandler.sendEvent(State.CANCELLED, State.BEGAN);\n        }\n\n        otherHandler.awaiting = false;\n      }\n    }\n\n    if (newState === State.ACTIVE) {\n      this.tryActivate(handler);\n    } else if (oldState === State.ACTIVE || oldState === State.END) {\n      if (handler.active) {\n        handler.sendEvent(newState, oldState);\n      } else if (\n        oldState === State.ACTIVE &&\n        (newState === State.CANCELLED || newState === State.FAILED)\n      ) {\n        handler.sendEvent(newState, State.BEGAN);\n      }\n    } else if (\n      oldState !== State.UNDETERMINED ||\n      newState !== State.CANCELLED\n    ) {\n      handler.sendEvent(newState, oldState);\n    }\n\n    this.handlingChangeSemaphore -= 1;\n\n    this.scheduleFinishedHandlersCleanup();\n\n    if (!this.awaitingHandlers.includes(handler)) {\n      this.cleanupAwaitingHandlers(handler);\n    }\n  }\n\n  private makeActive(handler: IGestureHandler): void {\n    const currentState = handler.state;\n\n    handler.active = true;\n    handler.shouldResetProgress = true;\n    handler.activationIndex = this.activationIndex++;\n\n    for (let i = this.gestureHandlers.length - 1; i >= 0; --i) {\n      if (this.shouldHandlerBeCancelledBy(this.gestureHandlers[i], handler)) {\n        this.gestureHandlers[i].cancel();\n      }\n    }\n\n    for (const otherHandler of this.awaitingHandlers) {\n      if (this.shouldHandlerBeCancelledBy(otherHandler, handler)) {\n        otherHandler.awaiting = false;\n      }\n    }\n\n    handler.sendEvent(State.ACTIVE, State.BEGAN);\n\n    if (currentState !== State.ACTIVE) {\n      handler.sendEvent(State.END, State.ACTIVE);\n      if (currentState !== State.END) {\n        handler.sendEvent(State.UNDETERMINED, State.END);\n      }\n    }\n\n    if (!handler.awaiting) {\n      return;\n    }\n\n    handler.awaiting = false;\n\n    this.awaitingHandlers = this.awaitingHandlers.filter(\n      (otherHandler) => otherHandler !== handler\n    );\n  }\n\n  private addAwaitingHandler(handler: IGestureHandler): void {\n    if (this.awaitingHandlers.includes(handler)) {\n      return;\n    }\n\n    this.awaitingHandlers.push(handler);\n    this.awaitingHandlersTags.add(handler.handlerTag);\n\n    handler.awaiting = true;\n    handler.activationIndex = this.activationIndex++;\n  }\n\n  public recordHandlerIfNotPresent(handler: IGestureHandler): void {\n    if (this.gestureHandlers.includes(handler)) {\n      return;\n    }\n\n    this.gestureHandlers.push(handler);\n\n    handler.active = false;\n    handler.awaiting = false;\n    handler.activationIndex = Number.MAX_SAFE_INTEGER;\n  }\n\n  private shouldHandlerWaitForOther(\n    handler: IGestureHandler,\n    otherHandler: IGestureHandler\n  ): boolean {\n    return (\n      handler !== otherHandler &&\n      (handler.shouldWaitForHandlerFailure(otherHandler) ||\n        otherHandler.shouldRequireToWaitForFailure(handler))\n    );\n  }\n\n  private canRunSimultaneously(\n    gh1: IGestureHandler,\n    gh2: IGestureHandler\n  ): boolean {\n    return (\n      gh1 === gh2 ||\n      gh1.shouldRecognizeSimultaneously(gh2) ||\n      gh2.shouldRecognizeSimultaneously(gh1)\n    );\n  }\n\n  private shouldHandlerBeCancelledBy(\n    handler: IGestureHandler,\n    otherHandler: IGestureHandler\n  ): boolean {\n    if (this.canRunSimultaneously(handler, otherHandler)) {\n      return false;\n    }\n\n    if (handler.awaiting || handler.state === State.ACTIVE) {\n      // For now it always returns false\n      return handler.shouldBeCancelledByOther(otherHandler);\n    }\n\n    const handlerPointers: number[] = handler.getTrackedPointersID();\n    const otherPointers: number[] = otherHandler.getTrackedPointersID();\n\n    if (\n      !PointerTracker.shareCommonPointers(handlerPointers, otherPointers) &&\n      handler.delegate.view !== otherHandler.delegate.view\n    ) {\n      return this.checkOverlap(handler, otherHandler);\n    }\n\n    return true;\n  }\n\n  private checkOverlap(\n    handler: IGestureHandler,\n    otherHandler: IGestureHandler\n  ): boolean {\n    // If handlers don't have common pointers, default return value is false.\n    // However, if at least on pointer overlaps with both handlers, we return true\n    // This solves issue in overlapping parents example\n\n    // TODO: Find better way to handle that issue, for example by activation order and handler cancelling\n\n    const isPointerWithinBothBounds = (pointer: number) => {\n      const point = handler.tracker.getLastAbsoluteCoords(pointer);\n\n      return (\n        handler.delegate.isPointerInBounds(point) &&\n        otherHandler.delegate.isPointerInBounds(point)\n      );\n    };\n\n    return handler.getTrackedPointersID().some(isPointerWithinBothBounds);\n  }\n\n  private isFinished(state: State): boolean {\n    return (\n      state === State.END || state === State.FAILED || state === State.CANCELLED\n    );\n  }\n\n  // This function is called when handler receives touchdown event\n  // If handler is using mouse or pen as a pointer and any handler receives touch event,\n  // mouse/pen event dissappears - it doesn't send onPointerCancel nor onPointerUp (and others)\n  // This became a problem because handler was left at active state without any signal to end or fail\n  // To handle this, when new touch event is received, we loop through active handlers and check which type of\n  // pointer they're using. If there are any handler with mouse/pen as a pointer, we cancel them\n  public cancelMouseAndPenGestures(currentHandler: IGestureHandler): void {\n    this.gestureHandlers.forEach((handler: IGestureHandler) => {\n      if (\n        handler.pointerType !== PointerType.MOUSE &&\n        handler.pointerType !== PointerType.STYLUS\n      ) {\n        return;\n      }\n\n      if (handler !== currentHandler) {\n        handler.cancel();\n      } else {\n        // Handler that received touch event should have its pointer tracker reset\n        // This allows handler to smoothly change from mouse/pen to touch\n        // The drawback is, that when we try to use mouse/pen one more time, it doesn't send onPointerDown at the first time\n        // so it is required to click two times to get handler to work\n        //\n        // However, handler will receive manually created onPointerEnter that is triggered in EventManager in onPointerMove method.\n        // There may be possibility to use that fact to make handler respond properly to first mouse click\n        handler.tracker.resetTracker();\n      }\n    });\n  }\n\n  public static get instance(): GestureHandlerOrchestrator {\n    if (!GestureHandlerOrchestrator._instance) {\n      GestureHandlerOrchestrator._instance = new GestureHandlerOrchestrator();\n    }\n\n    return GestureHandlerOrchestrator._instance;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}