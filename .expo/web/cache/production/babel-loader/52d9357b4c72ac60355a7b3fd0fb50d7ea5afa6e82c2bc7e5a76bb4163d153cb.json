{"ast":null,"code":"'use strict';import{version as reactVersion}from'react';import Platform from\"react-native-web/dist/exports/Platform\";export function isJest(){return!!process.env.JEST_WORKER_ID;}export function isChromeDebugger(){return(!global.nativeCallSyncHook||!!global.__REMOTEDEV__)&&!global.RN$Bridgeless;}export function isWeb(){return\"web\"==='web';}export function isAndroid(){return\"web\"==='android';}function isWindows(){return\"web\"==='windows';}export function shouldBeUseWeb(){return isJest()||isChromeDebugger()||isWeb()||isWindows();}export function isFabric(){return!!global._IS_FABRIC;}export function isReact19(){return reactVersion.startsWith('19.');}export function isWindowAvailable(){return typeof window!=='undefined';}","map":{"version":3,"names":["version","reactVersion","Platform","isJest","process","env","JEST_WORKER_ID","isChromeDebugger","global","nativeCallSyncHook","__REMOTEDEV__","RN$Bridgeless","isWeb","isAndroid","isWindows","shouldBeUseWeb","isFabric","_IS_FABRIC","isReact19","startsWith","isWindowAvailable","window"],"sources":["C:\\Users\\Jorn\\Documents\\hitster\\node_modules\\react-native-reanimated\\src\\PlatformChecker.ts"],"sourcesContent":["'use strict';\nimport { version as reactVersion } from 'react';\nimport { Platform } from 'react-native';\n\n// This type is necessary since some libraries tend to do a lib check\n// and this file causes type errors on `global` access.\ntype localGlobal = typeof global & Record<string, unknown>;\n\nexport function isJest(): boolean {\n  return !!process.env.JEST_WORKER_ID;\n}\n\n// `isChromeDebugger` also returns true in Jest environment, so `isJest()` check should always be performed first\nexport function isChromeDebugger(): boolean {\n  return (\n    (!(global as localGlobal).nativeCallSyncHook ||\n      !!(global as localGlobal).__REMOTEDEV__) &&\n    !(global as localGlobal).RN$Bridgeless\n  );\n}\n\nexport function isWeb(): boolean {\n  return Platform.OS === 'web';\n}\n\nexport function isAndroid(): boolean {\n  return Platform.OS === 'android';\n}\n\nfunction isWindows(): boolean {\n  return Platform.OS === 'windows';\n}\n\nexport function shouldBeUseWeb() {\n  return isJest() || isChromeDebugger() || isWeb() || isWindows();\n}\n\nexport function isFabric() {\n  return !!(global as localGlobal)._IS_FABRIC;\n}\n\nexport function isReact19() {\n  return reactVersion.startsWith('19.');\n}\n\nexport function isWindowAvailable() {\n  // the window object is unavailable when building the server portion of a site that uses SSG\n  // this function shouldn't be used to conditionally render components\n  // https://www.joshwcomeau.com/react/the-perils-of-rehydration/\n  // @ts-ignore Fallback if `window` is undefined.\n  return typeof window !== 'undefined';\n}\n"],"mappings":"AAAA,YAAY,CACZ,OAASA,OAAO,GAAI,CAAAC,YAAY,KAAQ,OAAO,QAAAC,QAAA,8CAO/C,MAAO,SAAS,CAAAC,MAAMA,CAAA,CAAY,CAChC,MAAO,CAAC,CAACC,OAAO,CAACC,GAAG,CAACC,cAAc,CACrC,CAGA,MAAO,SAAS,CAAAC,gBAAgBA,CAAA,CAAY,CAC1C,MACE,CAAC,CAAEC,MAAM,CAAiBC,kBAAkB,EAC1C,CAAC,CAAED,MAAM,CAAiBE,aAAa,GACzC,CAAEF,MAAM,CAAiBG,aAAa,CAE1C,CAEA,MAAO,SAAS,CAAAC,KAAKA,CAAA,CAAY,CAC/B,MAAO,QAAgB,KAAK,CAC9B,CAEA,MAAO,SAAS,CAAAC,SAASA,CAAA,CAAY,CACnC,MAAO,QAAgB,SAAS,CAClC,CAEA,QAAS,CAAAC,SAASA,CAAA,CAAY,CAC5B,MAAO,QAAgB,SAAS,CAClC,CAEA,MAAO,SAAS,CAAAC,cAAcA,CAAA,CAAG,CAC/B,MAAO,CAAAZ,MAAM,CAAC,CAAC,EAAII,gBAAgB,CAAC,CAAC,EAAIK,KAAK,CAAC,CAAC,EAAIE,SAAS,CAAC,CAAC,CACjE,CAEA,MAAO,SAAS,CAAAE,QAAQA,CAAA,CAAG,CACzB,MAAO,CAAC,CAAER,MAAM,CAAiBS,UAAU,CAC7C,CAEA,MAAO,SAAS,CAAAC,SAASA,CAAA,CAAG,CAC1B,MAAO,CAAAjB,YAAY,CAACkB,UAAU,CAAC,KAAK,CAAC,CACvC,CAEA,MAAO,SAAS,CAAAC,iBAAiBA,CAAA,CAAG,CAKlC,MAAO,OAAO,CAAAC,MAAM,GAAK,WAAW,CACtC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}