{"ast":null,"code":"'use strict';import{shouldBeUseWeb}from\"../PlatformChecker.js\";import{useAnimatedStyle}from\"./useAnimatedStyle.js\";function useAnimatedPropsJS(updater,deps,adapters){return useAnimatedStyle(updater,deps,adapters,true);}var useAnimatedPropsNative=useAnimatedStyle;export var useAnimatedProps=shouldBeUseWeb()?useAnimatedPropsJS:useAnimatedPropsNative;","map":{"version":3,"names":["shouldBeUseWeb","useAnimatedStyle","useAnimatedPropsJS","updater","deps","adapters","useAnimatedPropsNative","useAnimatedProps"],"sources":["C:\\Users\\Jorn\\Documents\\hitster\\node_modules\\react-native-reanimated\\src\\hook\\useAnimatedProps.ts"],"sourcesContent":["'use strict';\nimport type { AnimatedPropsAdapterFunction } from '../commonTypes';\nimport { shouldBeUseWeb } from '../PlatformChecker';\nimport type { DependencyList, UseAnimatedStyleInternal } from './commonTypes';\nimport { useAnimatedStyle } from './useAnimatedStyle';\n\n// TODO: we should make sure that when useAP is used we are not assigning styles\n\ntype UseAnimatedProps = <Props extends object>(\n  updater: () => Partial<Props>,\n  dependencies?: DependencyList | null,\n  adapters?:\n    | AnimatedPropsAdapterFunction\n    | AnimatedPropsAdapterFunction[]\n    | null,\n  isAnimatedProps?: boolean\n) => Partial<Props>;\n\nfunction useAnimatedPropsJS<Props extends object>(\n  updater: () => Props,\n  deps?: DependencyList | null,\n  adapters?:\n    | AnimatedPropsAdapterFunction\n    | AnimatedPropsAdapterFunction[]\n    | null\n) {\n  return (useAnimatedStyle as UseAnimatedStyleInternal<Props>)(\n    updater,\n    deps,\n    adapters,\n    true\n  );\n}\n\nconst useAnimatedPropsNative = useAnimatedStyle;\n\n/**\n * Lets you create an animated props object which can be animated using shared\n * values.\n *\n * @param updater - A function returning an object with properties you want to\n *   animate.\n * @param dependencies - An optional array of dependencies. Only relevant when\n *   using Reanimated without the Babel plugin on the Web.\n * @param adapters - An optional function or array of functions allowing to\n *   adopt prop naming between JS and the native side.\n * @returns An animated props object which has to be passed to `animatedProps`\n *   property of an Animated component that you want to animate.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedProps\n */\nexport const useAnimatedProps: UseAnimatedProps = shouldBeUseWeb()\n  ? (useAnimatedPropsJS as UseAnimatedProps)\n  : useAnimatedPropsNative;\n"],"mappings":"AAAA,YAAY,CAEZ,OAASA,cAAc,KAAQ,uBAAoB,CAEnD,OAASC,gBAAgB,KAAQ,uBAAoB,CAcrD,QAAS,CAAAC,kBAAkBA,CACzBC,OAAoB,CACpBC,IAA4B,CAC5BC,QAGQ,CACR,CACA,MAAQ,CAAAJ,gBAAgB,CACtBE,OAAO,CACPC,IAAI,CACJC,QAAQ,CACR,IACF,CAAC,CACH,CAEA,GAAM,CAAAC,sBAAsB,CAAGL,gBAAgB,CAgB/C,MAAO,IAAM,CAAAM,gBAAkC,CAAGP,cAAc,CAAC,CAAC,CAC7DE,kBAAkB,CACnBI,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}