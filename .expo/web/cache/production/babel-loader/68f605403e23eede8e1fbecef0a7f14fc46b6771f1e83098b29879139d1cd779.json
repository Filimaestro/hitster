{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import createHandler from'./createHandler';import{baseGestureHandlerProps}from'./gestureHandlerCommon';export var nativeViewGestureHandlerProps=['shouldActivateOnStart','disallowInterruption'];export var nativeViewProps=[].concat(_toConsumableArray(baseGestureHandlerProps),nativeViewGestureHandlerProps);export var nativeViewHandlerName='NativeViewGestureHandler';export var NativeViewGestureHandler=createHandler({name:nativeViewHandlerName,allowedProps:nativeViewProps,config:{}});","map":{"version":3,"names":["createHandler","baseGestureHandlerProps","nativeViewGestureHandlerProps","nativeViewProps","concat","_toConsumableArray","nativeViewHandlerName","NativeViewGestureHandler","name","allowedProps","config"],"sources":["C:\\Users\\Jorn\\Documents\\hitster\\node_modules\\react-native-gesture-handler\\lib\\module\\handlers\\NativeViewGestureHandler.ts"],"sourcesContent":["import type { NativeViewGestureHandlerPayload } from './GestureHandlerEventPayload';\nimport createHandler from './createHandler';\nimport {\n  BaseGestureHandlerProps,\n  baseGestureHandlerProps,\n} from './gestureHandlerCommon';\n\nexport const nativeViewGestureHandlerProps = [\n  'shouldActivateOnStart',\n  'disallowInterruption',\n] as const;\n\nexport interface NativeViewGestureConfig {\n  /**\n   * Android only.\n   *\n   * Determines whether the handler should check for an existing touch event on\n   * instantiation.\n   */\n  shouldActivateOnStart?: boolean;\n\n  /**\n   * When `true`, cancels all other gesture handlers when this\n   * `NativeViewGestureHandler` receives an `ACTIVE` state event.\n   */\n  disallowInterruption?: boolean;\n}\n\n/**\n * @deprecated NativeViewGestureHandler will be removed in the future version of Gesture Handler. Use `Gesture.Native()` instead.\n */\nexport interface NativeViewGestureHandlerProps\n  extends BaseGestureHandlerProps<NativeViewGestureHandlerPayload>,\n    NativeViewGestureConfig {}\n\nexport const nativeViewProps = [\n  ...baseGestureHandlerProps,\n  ...nativeViewGestureHandlerProps,\n] as const;\n\nexport const nativeViewHandlerName = 'NativeViewGestureHandler';\n\n/**\n * @deprecated NativeViewGestureHandler will be removed in the future version of Gesture Handler. Use `Gesture.Native()` instead.\n */\nexport type NativeViewGestureHandler = typeof NativeViewGestureHandler;\n\n/**\n * @deprecated NativeViewGestureHandler will be removed in the future version of Gesture Handler. Use `Gesture.Native()` instead.\n */\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nexport const NativeViewGestureHandler = createHandler<\n  NativeViewGestureHandlerProps,\n  NativeViewGestureHandlerPayload\n>({\n  name: nativeViewHandlerName,\n  allowedProps: nativeViewProps,\n  config: {},\n});\n"],"mappings":"yEACA,MAAO,CAAAA,aAAP,KAA0B,iBAA1B,CACA,OAEEC,uBAFF,KAGO,wBAHP,CAKA,MAAO,IAAM,CAAAC,6BAA6B,CAAG,CAC3C,uBAD2C,CAE3C,sBAF2C,CAAtC,CA4BP,MAAO,IAAM,CAAAC,eAAe,IAAAC,MAAA,CAAAC,kBAAA,CACvBJ,uBAD0B,EAE1BC,6BAF0B,CAAxB,CAKP,MAAO,IAAM,CAAAI,qBAAqB,CAAG,0BAA9B,CAWP,MAAO,IAAM,CAAAC,wBAAwB,CAAGP,aAAa,CAGnD,CACAQ,IAAI,CAAEF,qBADN,CAEAG,YAAY,CAAEN,eAFd,CAGAO,MAAM,CAAE,EAHR,CAHmD,CAA9C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}