{"ast":null,"code":"'use strict';import{blue,green,hsvToColor,opacity,processColor,red,rgbaColor,RGBtoHSV}from\"./Colors.js\";import{makeMutable}from\"./core.js\";import culori from\"./culori/index.js\";import{ReanimatedError}from\"./errors.js\";import{useSharedValue}from\"./hook/useSharedValue.js\";import{Extrapolation,interpolate}from\"./interpolation.js\";export var Extrapolate=Extrapolation;var _worklet_13129257120836_init_data={code:\"function interpolateColorJs1(value,inputRange,colors,options){const{interpolate,Extrapolation,hsvToColor}=this.__closure;let h=0;const{useCorrectedHSVInterpolation=true}=options;if(useCorrectedHSVInterpolation){const correctedInputRange=[inputRange[0]];const originalH=colors.h;const correctedH=[originalH[0]];for(let i=1;i<originalH.length;++i){const d=originalH[i]-originalH[i-1];if(originalH[i]>originalH[i-1]&&d>0.5){correctedInputRange.push(inputRange[i]);correctedInputRange.push(inputRange[i]+0.00001);correctedH.push(originalH[i]-1);correctedH.push(originalH[i]);}else if(originalH[i]<originalH[i-1]&&d<-0.5){correctedInputRange.push(inputRange[i]);correctedInputRange.push(inputRange[i]+0.00001);correctedH.push(originalH[i]+1);correctedH.push(originalH[i]);}else{correctedInputRange.push(inputRange[i]);correctedH.push(originalH[i]);}}h=(interpolate(value,correctedInputRange,correctedH,Extrapolation.CLAMP)+1)%1;}else{h=interpolate(value,inputRange,colors.h,Extrapolation.CLAMP);}const s=interpolate(value,inputRange,colors.s,Extrapolation.CLAMP);const v=interpolate(value,inputRange,colors.v,Extrapolation.CLAMP);const a=interpolate(value,inputRange,colors.a,Extrapolation.CLAMP);return hsvToColor(h,s,v,a);}\"};var interpolateColorsHSV=function(){var interpolateColorJs1=function interpolateColorJs1(value,inputRange,colors,options){var h=0;var _options$useCorrected=options.useCorrectedHSVInterpolation,useCorrectedHSVInterpolation=_options$useCorrected===void 0?true:_options$useCorrected;if(useCorrectedHSVInterpolation){var correctedInputRange=[inputRange[0]];var originalH=colors.h;var correctedH=[originalH[0]];for(var i=1;i<originalH.length;++i){var d=originalH[i]-originalH[i-1];if(originalH[i]>originalH[i-1]&&d>0.5){correctedInputRange.push(inputRange[i]);correctedInputRange.push(inputRange[i]+0.00001);correctedH.push(originalH[i]-1);correctedH.push(originalH[i]);}else if(originalH[i]<originalH[i-1]&&d<-0.5){correctedInputRange.push(inputRange[i]);correctedInputRange.push(inputRange[i]+0.00001);correctedH.push(originalH[i]+1);correctedH.push(originalH[i]);}else{correctedInputRange.push(inputRange[i]);correctedH.push(originalH[i]);}}h=(interpolate(value,correctedInputRange,correctedH,Extrapolation.CLAMP)+1)%1;}else{h=interpolate(value,inputRange,colors.h,Extrapolation.CLAMP);}var s=interpolate(value,inputRange,colors.s,Extrapolation.CLAMP);var v=interpolate(value,inputRange,colors.v,Extrapolation.CLAMP);var a=interpolate(value,inputRange,colors.a,Extrapolation.CLAMP);return hsvToColor(h,s,v,a);};interpolateColorJs1.__closure={interpolate:interpolate,Extrapolation:Extrapolation,hsvToColor:hsvToColor};interpolateColorJs1.__workletHash=13129257120836;interpolateColorJs1.__initData=_worklet_13129257120836_init_data;return interpolateColorJs1;}();var _worklet_14181116787695_init_data={code:\"function interpolateColorJs2(x,gamma){return x.map(function(v){return Math.pow(v/255,gamma);});}\"};var toLinearSpace=function(){var interpolateColorJs2=function interpolateColorJs2(x,gamma){return x.map(function(v){return Math.pow(v/255,gamma);});};interpolateColorJs2.__closure={};interpolateColorJs2.__workletHash=14181116787695;interpolateColorJs2.__initData=_worklet_14181116787695_init_data;return interpolateColorJs2;}();var _worklet_17264473455247_init_data={code:\"function interpolateColorJs3(x,gamma){return Math.round(Math.pow(x,1/gamma)*255);}\"};var toGammaSpace=function(){var interpolateColorJs3=function interpolateColorJs3(x,gamma){return Math.round(Math.pow(x,1/gamma)*255);};interpolateColorJs3.__closure={};interpolateColorJs3.__workletHash=17264473455247;interpolateColorJs3.__initData=_worklet_17264473455247_init_data;return interpolateColorJs3;}();var _worklet_8638875677747_init_data={code:\"function interpolateColorJs4(value,inputRange,colors,options){const{toLinearSpace,interpolate,Extrapolation,rgbaColor,toGammaSpace}=this.__closure;const{gamma=2.2}=options;let{r:outputR,g:outputG,b:outputB}=colors;if(gamma!==1){outputR=toLinearSpace(outputR,gamma);outputG=toLinearSpace(outputG,gamma);outputB=toLinearSpace(outputB,gamma);}const r=interpolate(value,inputRange,outputR,Extrapolation.CLAMP);const g=interpolate(value,inputRange,outputG,Extrapolation.CLAMP);const b=interpolate(value,inputRange,outputB,Extrapolation.CLAMP);const a=interpolate(value,inputRange,colors.a,Extrapolation.CLAMP);if(gamma===1){return rgbaColor(r,g,b,a);}return rgbaColor(toGammaSpace(r,gamma),toGammaSpace(g,gamma),toGammaSpace(b,gamma),a);}\"};var interpolateColorsRGB=function(){var interpolateColorJs4=function interpolateColorJs4(value,inputRange,colors,options){var _options$gamma=options.gamma,gamma=_options$gamma===void 0?2.2:_options$gamma;var outputR=colors.r,outputG=colors.g,outputB=colors.b;if(gamma!==1){outputR=toLinearSpace(outputR,gamma);outputG=toLinearSpace(outputG,gamma);outputB=toLinearSpace(outputB,gamma);}var r=interpolate(value,inputRange,outputR,Extrapolation.CLAMP);var g=interpolate(value,inputRange,outputG,Extrapolation.CLAMP);var b=interpolate(value,inputRange,outputB,Extrapolation.CLAMP);var a=interpolate(value,inputRange,colors.a,Extrapolation.CLAMP);if(gamma===1){return rgbaColor(r,g,b,a);}return rgbaColor(toGammaSpace(r,gamma),toGammaSpace(g,gamma),toGammaSpace(b,gamma),a);};interpolateColorJs4.__closure={toLinearSpace:toLinearSpace,interpolate:interpolate,Extrapolation:Extrapolation,rgbaColor:rgbaColor,toGammaSpace:toGammaSpace};interpolateColorJs4.__workletHash=8638875677747;interpolateColorJs4.__initData=_worklet_8638875677747_init_data;return interpolateColorJs4;}();var _worklet_11685971065915_init_data={code:\"function interpolateColorJs5(value,inputRange,colors,_options){const{interpolate,Extrapolation,culori,rgbaColor}=this.__closure;const l=interpolate(value,inputRange,colors.l,Extrapolation.CLAMP);const a=interpolate(value,inputRange,colors.a,Extrapolation.CLAMP);const b=interpolate(value,inputRange,colors.b,Extrapolation.CLAMP);const alpha=interpolate(value,inputRange,colors.alpha,Extrapolation.CLAMP);const{r:_r,g:_g,b:_b,alpha:_alpha}=culori.oklab.convert.toRgb({l:l,a:a,b:b,alpha:alpha});return rgbaColor(_r,_g,_b,_alpha);}\"};var interpolateColorsLAB=function(){var interpolateColorJs5=function interpolateColorJs5(value,inputRange,colors,_options){var l=interpolate(value,inputRange,colors.l,Extrapolation.CLAMP);var a=interpolate(value,inputRange,colors.a,Extrapolation.CLAMP);var b=interpolate(value,inputRange,colors.b,Extrapolation.CLAMP);var alpha=interpolate(value,inputRange,colors.alpha,Extrapolation.CLAMP);var _culori$oklab$convert=culori.oklab.convert.toRgb({l:l,a:a,b:b,alpha:alpha}),_r=_culori$oklab$convert.r,_g=_culori$oklab$convert.g,_b=_culori$oklab$convert.b,_alpha=_culori$oklab$convert.alpha;return rgbaColor(_r,_g,_b,_alpha);};interpolateColorJs5.__closure={interpolate:interpolate,Extrapolation:Extrapolation,culori:culori,rgbaColor:rgbaColor};interpolateColorJs5.__workletHash=11685971065915;interpolateColorJs5.__initData=_worklet_11685971065915_init_data;return interpolateColorJs5;}();var _worklet_6405587769388_init_data={code:\"function interpolateColorJs6(colors,convFromRgb){const{processColor,red,green,blue,opacity}=this.__closure;const ch1=[];const ch2=[];const ch3=[];const alpha=[];for(let i=0;i<colors.length;i++){const color=colors[i];const processedColor=processColor(color);if(typeof processedColor==='number'){const convertedColor=convFromRgb({r:red(processedColor),g:green(processedColor),b:blue(processedColor)});ch1.push(convertedColor.ch1);ch2.push(convertedColor.ch2);ch3.push(convertedColor.ch3);alpha.push(opacity(processedColor));}}return{ch1:ch1,ch2:ch2,ch3:ch3,alpha:alpha};}\"};var _splitColorsIntoChannels=function(){var interpolateColorJs6=function interpolateColorJs6(colors,convFromRgb){var ch1=[];var ch2=[];var ch3=[];var alpha=[];for(var i=0;i<colors.length;i++){var color=colors[i];var processedColor=processColor(color);if(typeof processedColor==='number'){var convertedColor=convFromRgb({r:red(processedColor),g:green(processedColor),b:blue(processedColor)});ch1.push(convertedColor.ch1);ch2.push(convertedColor.ch2);ch3.push(convertedColor.ch3);alpha.push(opacity(processedColor));}}return{ch1:ch1,ch2:ch2,ch3:ch3,alpha:alpha};};interpolateColorJs6.__closure={processColor:processColor,red:red,green:green,blue:blue,opacity:opacity};interpolateColorJs6.__workletHash=6405587769388;interpolateColorJs6.__initData=_worklet_6405587769388_init_data;return interpolateColorJs6;}();var _worklet_17202525310342_init_data={code:\"function interpolateColorJs7(colors){const{_splitColorsIntoChannels}=this.__closure;const{ch1:ch1,ch2:ch2,ch3:ch3,alpha:alpha}=_splitColorsIntoChannels(colors,function(color){return{ch1:color.r,ch2:color.g,ch3:color.b};});return{r:ch1,g:ch2,b:ch3,a:alpha};}\"};var getInterpolateRGB=function(){var interpolateColorJs7=function interpolateColorJs7(colors){var _splitColorsIntoChann=_splitColorsIntoChannels(colors,function(color){return{ch1:color.r,ch2:color.g,ch3:color.b};}),ch1=_splitColorsIntoChann.ch1,ch2=_splitColorsIntoChann.ch2,ch3=_splitColorsIntoChann.ch3,alpha=_splitColorsIntoChann.alpha;return{r:ch1,g:ch2,b:ch3,a:alpha};};interpolateColorJs7.__closure={_splitColorsIntoChannels:_splitColorsIntoChannels};interpolateColorJs7.__workletHash=17202525310342;interpolateColorJs7.__initData=_worklet_17202525310342_init_data;return interpolateColorJs7;}();var _worklet_3304109939742_init_data={code:\"function interpolateColorJs8(colors){const{_splitColorsIntoChannels,RGBtoHSV}=this.__closure;const{ch1:ch1,ch2:ch2,ch3:ch3,alpha:alpha}=_splitColorsIntoChannels(colors,function(color){const hsvColor=RGBtoHSV(color.r,color.g,color.b);return{ch1:hsvColor.h,ch2:hsvColor.s,ch3:hsvColor.v};});return{h:ch1,s:ch2,v:ch3,a:alpha};}\"};var getInterpolateHSV=function(){var interpolateColorJs8=function interpolateColorJs8(colors){var _splitColorsIntoChann2=_splitColorsIntoChannels(colors,function(color){var hsvColor=RGBtoHSV(color.r,color.g,color.b);return{ch1:hsvColor.h,ch2:hsvColor.s,ch3:hsvColor.v};}),ch1=_splitColorsIntoChann2.ch1,ch2=_splitColorsIntoChann2.ch2,ch3=_splitColorsIntoChann2.ch3,alpha=_splitColorsIntoChann2.alpha;return{h:ch1,s:ch2,v:ch3,a:alpha};};interpolateColorJs8.__closure={_splitColorsIntoChannels:_splitColorsIntoChannels,RGBtoHSV:RGBtoHSV};interpolateColorJs8.__workletHash=3304109939742;interpolateColorJs8.__initData=_worklet_3304109939742_init_data;return interpolateColorJs8;}();var _worklet_8302602200896_init_data={code:\"function interpolateColorJs9(colors){const{_splitColorsIntoChannels,culori}=this.__closure;const{ch1:ch1,ch2:ch2,ch3:ch3,alpha:alpha}=_splitColorsIntoChannels(colors,function(color){const labColor=culori.oklab.convert.fromRgb(color);return{ch1:labColor.l,ch2:labColor.a,ch3:labColor.b};});return{l:ch1,a:ch2,b:ch3,alpha:alpha};}\"};var getInterpolateLAB=function(){var interpolateColorJs9=function interpolateColorJs9(colors){var _splitColorsIntoChann3=_splitColorsIntoChannels(colors,function(color){var labColor=culori.oklab.convert.fromRgb(color);return{ch1:labColor.l,ch2:labColor.a,ch3:labColor.b};}),ch1=_splitColorsIntoChann3.ch1,ch2=_splitColorsIntoChann3.ch2,ch3=_splitColorsIntoChann3.ch3,alpha=_splitColorsIntoChann3.alpha;return{l:ch1,a:ch2,b:ch3,alpha:alpha};};interpolateColorJs9.__closure={_splitColorsIntoChannels:_splitColorsIntoChannels,culori:culori};interpolateColorJs9.__workletHash=8302602200896;interpolateColorJs9.__initData=_worklet_8302602200896_init_data;return interpolateColorJs9;}();var _worklet_611886447692_init_data={code:\"function interpolateColor_interpolateColorJs10(value,inputRange,outputRange,colorSpace='RGB',options={}){const{interpolateColorsHSV,getInterpolateHSV,interpolateColorsRGB,getInterpolateRGB,interpolateColorsLAB,getInterpolateLAB}=this.__closure;if(colorSpace==='HSV'){return interpolateColorsHSV(value,inputRange,getInterpolateHSV(outputRange),options);}else if(colorSpace==='RGB'){return interpolateColorsRGB(value,inputRange,getInterpolateRGB(outputRange),options);}else if(colorSpace==='LAB'){return interpolateColorsLAB(value,inputRange,getInterpolateLAB(outputRange),options);}throw new ReanimatedError(\\\"Invalid color space provided: \\\"+colorSpace+\\\". Supported values are: ['RGB', 'HSV', 'LAB'].\\\");}\"};export var interpolateColor=function(){var interpolateColor=function interpolateColor(value,inputRange,outputRange){var colorSpace=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'RGB';var options=arguments.length>4&&arguments[4]!==undefined?arguments[4]:{};if(colorSpace==='HSV'){return interpolateColorsHSV(value,inputRange,getInterpolateHSV(outputRange),options);}else if(colorSpace==='RGB'){return interpolateColorsRGB(value,inputRange,getInterpolateRGB(outputRange),options);}else if(colorSpace==='LAB'){return interpolateColorsLAB(value,inputRange,getInterpolateLAB(outputRange),options);}throw new ReanimatedError(`Invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV', 'LAB'].`);};interpolateColor.__closure={interpolateColorsHSV:interpolateColorsHSV,getInterpolateHSV:getInterpolateHSV,interpolateColorsRGB:interpolateColorsRGB,getInterpolateRGB:getInterpolateRGB,interpolateColorsLAB:interpolateColorsLAB,getInterpolateLAB:getInterpolateLAB};interpolateColor.__workletHash=611886447692;interpolateColor.__initData=_worklet_611886447692_init_data;return interpolateColor;}();export var ColorSpace=function(ColorSpace){ColorSpace[ColorSpace[\"RGB\"]=0]=\"RGB\";ColorSpace[ColorSpace[\"HSV\"]=1]=\"HSV\";ColorSpace[ColorSpace[\"LAB\"]=2]=\"LAB\";return ColorSpace;}({});export function useInterpolateConfig(inputRange,outputRange){var colorSpace=arguments.length>2&&arguments[2]!==undefined?arguments[2]:ColorSpace.RGB;var options=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{};return useSharedValue({inputRange:inputRange,outputRange:outputRange,colorSpace:colorSpace,cache:makeMutable(null),options:options});}","map":{"version":3,"names":["blue","green","hsvToColor","opacity","processColor","red","rgbaColor","RGBtoHSV","makeMutable","culori","ReanimatedError","useSharedValue","Extrapolation","interpolate","Extrapolate","_worklet_13129257120836_init_data","code","interpolateColorsHSV","interpolateColorJs1","value","inputRange","colors","options","h","_options$useCorrected","useCorrectedHSVInterpolation","correctedInputRange","originalH","correctedH","i","length","d","push","CLAMP","s","v","a","__closure","__workletHash","__initData","_worklet_14181116787695_init_data","toLinearSpace","interpolateColorJs2","x","gamma","map","Math","pow","_worklet_17264473455247_init_data","toGammaSpace","interpolateColorJs3","round","_worklet_8638875677747_init_data","interpolateColorsRGB","interpolateColorJs4","_options$gamma","outputR","r","outputG","g","outputB","b","_worklet_11685971065915_init_data","interpolateColorsLAB","interpolateColorJs5","_options","l","alpha","_culori$oklab$convert","oklab","convert","toRgb","_r","_g","_b","_alpha","_worklet_6405587769388_init_data","_splitColorsIntoChannels","interpolateColorJs6","convFromRgb","ch1","ch2","ch3","color","processedColor","convertedColor","_worklet_17202525310342_init_data","getInterpolateRGB","interpolateColorJs7","_splitColorsIntoChann","_worklet_3304109939742_init_data","getInterpolateHSV","interpolateColorJs8","_splitColorsIntoChann2","hsvColor","_worklet_8302602200896_init_data","getInterpolateLAB","interpolateColorJs9","_splitColorsIntoChann3","labColor","fromRgb","_worklet_611886447692_init_data","interpolateColor","outputRange","colorSpace","arguments","undefined","ColorSpace","useInterpolateConfig","RGB","cache"],"sources":["C:\\Users\\Jorn\\Documents\\hitster\\node_modules\\react-native-reanimated\\src\\interpolateColor.ts"],"sourcesContent":["'use strict';\nimport {\n  blue,\n  green,\n  hsvToColor,\n  opacity,\n  processColor,\n  red,\n  rgbaColor,\n  RGBtoHSV,\n} from './Colors';\nimport type { SharedValue } from './commonTypes';\nimport { makeMutable } from './core';\nimport culori from './culori';\nimport { ReanimatedError } from './errors';\nimport { useSharedValue } from './hook/useSharedValue';\nimport { Extrapolation, interpolate } from './interpolation';\n\n/** @deprecated Please use Extrapolation instead */\nexport const Extrapolate = Extrapolation;\n\n/**\n * Options for color interpolation.\n *\n * @param gamma - Gamma value used in gamma correction. Defaults to `2.2`.\n * @param useCorrectedHSVInterpolation - Whether to reduce the number of colors\n *   the interpolation has to go through. Defaults to `true`.\n */\nexport type InterpolationOptions = {\n  gamma?: number;\n  useCorrectedHSVInterpolation?: boolean;\n};\n\nconst interpolateColorsHSV = (\n  value: number,\n  inputRange: readonly number[],\n  colors: InterpolateHSV,\n  options: InterpolationOptions\n) => {\n  'worklet';\n  let h = 0;\n  const { useCorrectedHSVInterpolation = true } = options;\n  if (useCorrectedHSVInterpolation) {\n    // if the difference between hues in a range is > 180 deg\n    // then move the hue at the right end of the range +/- 360 deg\n    // and add the next point in the original place + 0.00001 with original hue\n    // to not break the next range\n    const correctedInputRange = [inputRange[0]];\n    const originalH = colors.h;\n    const correctedH = [originalH[0]];\n\n    for (let i = 1; i < originalH.length; ++i) {\n      const d = originalH[i] - originalH[i - 1];\n      if (originalH[i] > originalH[i - 1] && d > 0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] - 1);\n        correctedH.push(originalH[i]);\n      } else if (originalH[i] < originalH[i - 1] && d < -0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] + 1);\n        correctedH.push(originalH[i]);\n      } else {\n        correctedInputRange.push(inputRange[i]);\n        correctedH.push(originalH[i]);\n      }\n    }\n    h =\n      (interpolate(\n        value,\n        correctedInputRange,\n        correctedH,\n        Extrapolation.CLAMP\n      ) +\n        1) %\n      1;\n  } else {\n    h = interpolate(value, inputRange, colors.h, Extrapolation.CLAMP);\n  }\n  const s = interpolate(value, inputRange, colors.s, Extrapolation.CLAMP);\n  const v = interpolate(value, inputRange, colors.v, Extrapolation.CLAMP);\n  const a = interpolate(value, inputRange, colors.a, Extrapolation.CLAMP);\n  return hsvToColor(h, s, v, a);\n};\n\nconst toLinearSpace = (x: number[], gamma: number): number[] => {\n  'worklet';\n  return x.map((v) => Math.pow(v / 255, gamma));\n};\n\nconst toGammaSpace = (x: number, gamma: number): number => {\n  'worklet';\n  return Math.round(Math.pow(x, 1 / gamma) * 255);\n};\n\nconst interpolateColorsRGB = (\n  value: number,\n  inputRange: readonly number[],\n  colors: InterpolateRGB,\n  options: InterpolationOptions\n) => {\n  'worklet';\n  const { gamma = 2.2 } = options;\n  let { r: outputR, g: outputG, b: outputB } = colors;\n  if (gamma !== 1) {\n    outputR = toLinearSpace(outputR, gamma);\n    outputG = toLinearSpace(outputG, gamma);\n    outputB = toLinearSpace(outputB, gamma);\n  }\n  const r = interpolate(value, inputRange, outputR, Extrapolation.CLAMP);\n  const g = interpolate(value, inputRange, outputG, Extrapolation.CLAMP);\n  const b = interpolate(value, inputRange, outputB, Extrapolation.CLAMP);\n  const a = interpolate(value, inputRange, colors.a, Extrapolation.CLAMP);\n  if (gamma === 1) {\n    return rgbaColor(r, g, b, a);\n  }\n  return rgbaColor(\n    toGammaSpace(r, gamma),\n    toGammaSpace(g, gamma),\n    toGammaSpace(b, gamma),\n    a\n  );\n};\n\nconst interpolateColorsLAB = (\n  value: number,\n  inputRange: readonly number[],\n  colors: InterpolateLAB,\n  _options: InterpolationOptions\n) => {\n  'worklet';\n  const l = interpolate(value, inputRange, colors.l, Extrapolation.CLAMP);\n  const a = interpolate(value, inputRange, colors.a, Extrapolation.CLAMP);\n  const b = interpolate(value, inputRange, colors.b, Extrapolation.CLAMP);\n  const alpha = interpolate(\n    value,\n    inputRange,\n    colors.alpha,\n    Extrapolation.CLAMP\n  );\n  const {\n    r: _r,\n    g: _g,\n    b: _b,\n    alpha: _alpha,\n  } = culori.oklab.convert.toRgb({ l, a, b, alpha });\n  return rgbaColor(_r, _g, _b, _alpha);\n};\n\nconst _splitColorsIntoChannels = (\n  colors: readonly (string | number)[],\n  convFromRgb: (color: { r: number; g: number; b: number }) => {\n    ch1: number;\n    ch2: number;\n    ch3: number;\n  }\n): {\n  ch1: number[];\n  ch2: number[];\n  ch3: number[];\n  alpha: number[];\n} => {\n  'worklet';\n  const ch1: number[] = [];\n  const ch2: number[] = [];\n  const ch3: number[] = [];\n  const alpha: number[] = [];\n\n  for (let i = 0; i < colors.length; i++) {\n    const color = colors[i];\n    const processedColor = processColor(color);\n    if (typeof processedColor === 'number') {\n      const convertedColor = convFromRgb({\n        r: red(processedColor),\n        g: green(processedColor),\n        b: blue(processedColor),\n      });\n\n      ch1.push(convertedColor.ch1);\n      ch2.push(convertedColor.ch2);\n      ch3.push(convertedColor.ch3);\n      alpha.push(opacity(processedColor));\n    }\n  }\n\n  return {\n    ch1,\n    ch2,\n    ch3,\n    alpha,\n  };\n};\n\nexport interface InterpolateRGB {\n  r: number[];\n  g: number[];\n  b: number[];\n  a: number[];\n}\n\nconst getInterpolateRGB = (\n  colors: readonly (string | number)[]\n): InterpolateRGB => {\n  'worklet';\n  const { ch1, ch2, ch3, alpha } = _splitColorsIntoChannels(\n    colors,\n    (color) => ({\n      ch1: color.r,\n      ch2: color.g,\n      ch3: color.b,\n    })\n  );\n\n  return {\n    r: ch1,\n    g: ch2,\n    b: ch3,\n    a: alpha,\n  };\n};\n\nexport interface InterpolateHSV {\n  h: number[];\n  s: number[];\n  v: number[];\n  a: number[];\n}\n\nconst getInterpolateHSV = (\n  colors: readonly (string | number)[]\n): InterpolateHSV => {\n  'worklet';\n  const { ch1, ch2, ch3, alpha } = _splitColorsIntoChannels(colors, (color) => {\n    const hsvColor = RGBtoHSV(color.r, color.g, color.b);\n    return {\n      ch1: hsvColor.h,\n      ch2: hsvColor.s,\n      ch3: hsvColor.v,\n    };\n  });\n\n  return {\n    h: ch1,\n    s: ch2,\n    v: ch3,\n    a: alpha,\n  };\n};\n\nexport interface InterpolateLAB {\n  l: number[];\n  a: number[];\n  b: number[];\n  alpha: number[];\n}\n\nconst getInterpolateLAB = (\n  colors: readonly (string | number)[]\n): InterpolateLAB => {\n  'worklet';\n\n  const { ch1, ch2, ch3, alpha } = _splitColorsIntoChannels(colors, (color) => {\n    const labColor = culori.oklab.convert.fromRgb(color);\n    return {\n      ch1: labColor.l,\n      ch2: labColor.a,\n      ch3: labColor.b,\n    };\n  });\n\n  return {\n    l: ch1,\n    a: ch2,\n    b: ch3,\n    alpha,\n  };\n};\n\n/**\n * Lets you map a value from a range of numbers to a range of colors using\n * linear interpolation.\n *\n * @param value - A number from the `input` range that is going to be mapped to\n *   the color in the `output` range.\n * @param inputRange - An array of numbers specifying the input range of the\n *   interpolation.\n * @param outputRange - An array of output colors values (eg. \"red\", \"#00FFCC\",\n *   \"rgba(255, 0, 0, 0.5)\").\n * @param colorSpace - The color space to use for interpolation. Defaults to\n *   'RGB'.\n * @param options - Additional options for interpolation -\n *   {@link InterpolationOptions}.\n * @returns The color after interpolation from within the output range in\n *   rgba(r, g, b, a) format.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/utilities/interpolateColor\n */\nexport function interpolateColor(\n  value: number,\n  inputRange: readonly number[],\n  outputRange: readonly string[],\n  colorSpace?: 'RGB' | 'HSV' | 'LAB',\n  options?: InterpolationOptions\n): string;\n\nexport function interpolateColor(\n  value: number,\n  inputRange: readonly number[],\n  outputRange: readonly number[],\n  colorSpace?: 'RGB' | 'HSV' | 'LAB',\n  options?: InterpolationOptions\n): number;\n\nexport function interpolateColor(\n  value: number,\n  inputRange: readonly number[],\n  outputRange: readonly (string | number)[],\n  colorSpace: 'RGB' | 'HSV' | 'LAB' = 'RGB',\n  options: InterpolationOptions = {}\n): string | number {\n  'worklet';\n  if (colorSpace === 'HSV') {\n    return interpolateColorsHSV(\n      value,\n      inputRange,\n      getInterpolateHSV(outputRange),\n      options\n    );\n  } else if (colorSpace === 'RGB') {\n    return interpolateColorsRGB(\n      value,\n      inputRange,\n      getInterpolateRGB(outputRange),\n      options\n    );\n  } else if (colorSpace === 'LAB') {\n    return interpolateColorsLAB(\n      value,\n      inputRange,\n      getInterpolateLAB(outputRange),\n      options\n    );\n  }\n\n  throw new ReanimatedError(\n    `Invalid color space provided: ${\n      colorSpace as string\n    }. Supported values are: ['RGB', 'HSV', 'LAB'].`\n  );\n}\n\nexport enum ColorSpace {\n  RGB = 0,\n  HSV = 1,\n  LAB = 2,\n}\n\nexport interface InterpolateConfig {\n  inputRange: readonly number[];\n  outputRange: readonly (string | number)[];\n  colorSpace: ColorSpace;\n  cache: SharedValue<InterpolateRGB | InterpolateHSV | null>;\n  options: InterpolationOptions;\n}\n\nexport function useInterpolateConfig(\n  inputRange: readonly number[],\n  outputRange: readonly (string | number)[],\n  colorSpace = ColorSpace.RGB,\n  options: InterpolationOptions = {}\n): SharedValue<InterpolateConfig> {\n  return useSharedValue<InterpolateConfig>({\n    inputRange,\n    outputRange,\n    colorSpace,\n    cache: makeMutable<InterpolateRGB | InterpolateHSV | null>(null),\n    options,\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}