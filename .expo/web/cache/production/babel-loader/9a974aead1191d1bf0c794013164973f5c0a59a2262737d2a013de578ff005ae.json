{"ast":null,"code":"'use strict';import{useEffect,useRef}from'react';import{isJest,isWeb}from\"../PlatformChecker.js\";import{makeShareable}from\"../shareables.js\";import{areDependenciesEqual,buildDependencies}from\"./utils.js\";export function useHandler(handlers,dependencies){var initRef=useRef(null);if(initRef.current===null){var _context=makeShareable({});initRef.current={context:_context,savedDependencies:[]};}useEffect(function(){return function(){initRef.current=null;};},[]);var _initRef$current=initRef.current,context=_initRef$current.context,savedDependencies=_initRef$current.savedDependencies;dependencies=buildDependencies(dependencies,handlers);var doDependenciesDiffer=!areDependenciesEqual(dependencies,savedDependencies);initRef.current.savedDependencies=dependencies;var useWeb=isWeb()||isJest();return{context:context,doDependenciesDiffer:doDependenciesDiffer,useWeb:useWeb};}","map":{"version":3,"names":["useEffect","useRef","isJest","isWeb","makeShareable","areDependenciesEqual","buildDependencies","useHandler","handlers","dependencies","initRef","current","context","savedDependencies","_initRef$current","doDependenciesDiffer","useWeb"],"sources":["C:\\Users\\Jorn\\Documents\\hitster\\node_modules\\react-native-reanimated\\src\\hook\\useHandler.ts"],"sourcesContent":["'use strict';\nimport { useEffect, useRef } from 'react';\n\nimport type { WorkletFunction } from '../commonTypes';\nimport { isJest, isWeb } from '../PlatformChecker';\nimport { makeShareable } from '../shareables';\nimport type { DependencyList, ReanimatedEvent } from './commonTypes';\nimport { areDependenciesEqual, buildDependencies } from './utils';\n\ninterface GeneralHandler<\n  Event extends object,\n  Context extends Record<string, unknown>,\n> {\n  (event: ReanimatedEvent<Event>, context: Context): void;\n}\n\ntype GeneralWorkletHandler<\n  Event extends object,\n  Context extends Record<string, unknown>,\n> = WorkletFunction<[event: ReanimatedEvent<Event>, context: Context]>;\n\ntype GeneralHandlers<\n  Event extends object,\n  Context extends Record<string, unknown>,\n> = Record<string, GeneralHandler<Event, Context> | undefined>;\n\ntype GeneralWorkletHandlers<\n  Event extends object,\n  Context extends Record<string, unknown>,\n> = Record<string, GeneralWorkletHandler<Event, Context> | undefined>;\n\ninterface ContextWithDependencies<Context extends Record<string, unknown>> {\n  context: Context;\n  savedDependencies: DependencyList;\n}\n\nexport interface UseHandlerContext<Context extends Record<string, unknown>> {\n  context: Context;\n  doDependenciesDiffer: boolean;\n  useWeb: boolean;\n}\n\n/**\n * Lets you find out whether the event handler dependencies have changed.\n *\n * @param handlers - An object of event handlers.\n * @param dependencies - An optional array of dependencies.\n * @returns An object containing a boolean indicating whether the dependencies\n *   have changed, and a boolean indicating whether the code is running on the\n *   web.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/advanced/useHandler\n */\n// @ts-expect-error This overload is required by our API.\nexport function useHandler<\n  Event extends object,\n  Context extends Record<string, unknown>,\n>(\n  handlers: GeneralHandlers<Event, Context>,\n  dependencies?: DependencyList\n): UseHandlerContext<Context>;\n\nexport function useHandler<\n  Event extends object,\n  Context extends Record<string, unknown>,\n>(\n  handlers: GeneralWorkletHandlers<Event, Context>,\n  dependencies?: DependencyList\n): UseHandlerContext<Context> {\n  const initRef = useRef<ContextWithDependencies<Context> | null>(null);\n  if (initRef.current === null) {\n    const context = makeShareable({} as Context);\n    initRef.current = {\n      context,\n      savedDependencies: [],\n    };\n  }\n\n  useEffect(() => {\n    return () => {\n      initRef.current = null;\n    };\n  }, []);\n\n  const { context, savedDependencies } = initRef.current;\n\n  dependencies = buildDependencies(\n    dependencies,\n    handlers as Record<string, WorkletFunction | undefined>\n  );\n\n  const doDependenciesDiffer = !areDependenciesEqual(\n    dependencies,\n    savedDependencies\n  );\n  initRef.current.savedDependencies = dependencies;\n  const useWeb = isWeb() || isJest();\n\n  return { context, doDependenciesDiffer, useWeb };\n}\n"],"mappings":"AAAA,YAAY,CACZ,OAASA,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAGzC,OAASC,MAAM,CAAEC,KAAK,KAAQ,uBAAoB,CAClD,OAASC,aAAa,KAAQ,kBAAe,CAE7C,OAASC,oBAAoB,CAAEC,iBAAiB,KAAQ,YAAS,CAsDjE,MAAO,SAAS,CAAAC,UAAUA,CAIxBC,QAAgD,CAChDC,YAA6B,CACD,CAC5B,GAAM,CAAAC,OAAO,CAAGT,MAAM,CAA0C,IAAI,CAAC,CACrE,GAAIS,OAAO,CAACC,OAAO,GAAK,IAAI,CAAE,CAC5B,GAAM,CAAAC,QAAO,CAAGR,aAAa,CAAC,CAAC,CAAY,CAAC,CAC5CM,OAAO,CAACC,OAAO,CAAG,CAChBC,OAAO,CAAPA,QAAO,CACPC,iBAAiB,CAAE,EACrB,CAAC,CACH,CAEAb,SAAS,CAAC,UAAM,CACd,MAAO,WAAM,CACXU,OAAO,CAACC,OAAO,CAAG,IAAI,CACxB,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN,IAAAG,gBAAA,CAAuCJ,OAAO,CAACC,OAAO,CAA9CC,OAAO,CAAAE,gBAAA,CAAPF,OAAO,CAAEC,iBAAA,CAAAC,gBAAA,CAAAD,iBAAA,CAEjBJ,YAAY,CAAGH,iBAAiB,CAC9BG,YAAY,CACZD,QACF,CAAC,CAED,GAAM,CAAAO,oBAAoB,CAAG,CAACV,oBAAoB,CAChDI,YAAY,CACZI,iBACF,CAAC,CACDH,OAAO,CAACC,OAAO,CAACE,iBAAiB,CAAGJ,YAAY,CAChD,GAAM,CAAAO,MAAM,CAAGb,KAAK,CAAC,CAAC,EAAID,MAAM,CAAC,CAAC,CAElC,MAAO,CAAEU,OAAO,CAAPA,OAAO,CAAEG,oBAAoB,CAApBA,oBAAoB,CAAEC,MAAA,CAAAA,MAAO,CAAC,CAClD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}