{"ast":null,"code":"'use strict';var _worklet_14926553619120_init_data={code:\"function parseBoxShadowString_processBoxShadowJs1(rawBoxShadows){const result=[];for(const rawBoxShadow of rawBoxShadows.split(/,(?![^()]*\\\\))/).map(function(bS){return bS.trim();}).filter(function(bS){return bS!=='';})){const boxShadow={offsetX:0,offsetY:0};let offsetX=null;let offsetY=null;let keywordDetectedAfterLength=false;let lengthCount=0;const args=rawBoxShadow.split(/\\\\s+(?![^(]*\\\\))/);for(const arg of args){if(arg==='inset'){if(boxShadow.inset!=null){return[];}if(offsetX!=null){keywordDetectedAfterLength=true;}boxShadow.inset=true;continue;}switch(lengthCount){case 0:offsetX=arg;lengthCount++;break;case 1:if(keywordDetectedAfterLength){return[];}offsetY=arg;lengthCount++;break;case 2:if(keywordDetectedAfterLength){return[];}boxShadow.blurRadius=arg;lengthCount++;break;case 3:if(keywordDetectedAfterLength){return[];}boxShadow.spreadDistance=arg;lengthCount++;break;case 4:if(keywordDetectedAfterLength){return[];}boxShadow.color=arg;lengthCount++;break;default:return[];}}if(offsetX===null||offsetY===null){return[];}boxShadow.offsetX=offsetX;boxShadow.offsetY=offsetY;result.push(boxShadow);}return result;}\"};var parseBoxShadowString=function(){var parseBoxShadowString=function parseBoxShadowString(rawBoxShadows){var result=[];for(var rawBoxShadow of rawBoxShadows.split(/,(?![^()]*\\))/).map(function(bS){return bS.trim();}).filter(function(bS){return bS!=='';})){var boxShadow={offsetX:0,offsetY:0};var offsetX=null;var offsetY=null;var keywordDetectedAfterLength=false;var lengthCount=0;var args=rawBoxShadow.split(/\\s+(?![^(]*\\))/);for(var arg of args){if(arg==='inset'){if(boxShadow.inset!=null){return[];}if(offsetX!=null){keywordDetectedAfterLength=true;}boxShadow.inset=true;continue;}switch(lengthCount){case 0:offsetX=arg;lengthCount++;break;case 1:if(keywordDetectedAfterLength){return[];}offsetY=arg;lengthCount++;break;case 2:if(keywordDetectedAfterLength){return[];}boxShadow.blurRadius=arg;lengthCount++;break;case 3:if(keywordDetectedAfterLength){return[];}boxShadow.spreadDistance=arg;lengthCount++;break;case 4:if(keywordDetectedAfterLength){return[];}boxShadow.color=arg;lengthCount++;break;default:return[];}}if(offsetX===null||offsetY===null){return[];}boxShadow.offsetX=offsetX;boxShadow.offsetY=offsetY;result.push(boxShadow);}return result;};parseBoxShadowString.__closure={};parseBoxShadowString.__workletHash=14926553619120;parseBoxShadowString.__initData=_worklet_14926553619120_init_data;return parseBoxShadowString;}();var _worklet_5190977403103_init_data={code:\"function parseLength_processBoxShadowJs2(length){const argsWithUnitsRegex=/([+-]?\\\\d*(\\\\.\\\\d+)?)([\\\\w\\\\W]+)?/g;const match=argsWithUnitsRegex.exec(length);if(!match||Number.isNaN(match[1])){return null;}if(match[3]!=null&&match[3]!=='px'){return null;}return Number(match[1]);}\"};var parseLength=function(){var parseLength=function parseLength(length){var argsWithUnitsRegex=/([+-]?\\d*(\\.\\d+)?)([\\w\\W]+)?/g;var match=argsWithUnitsRegex.exec(length);if(!match||Number.isNaN(match[1])){return null;}if(match[3]!=null&&match[3]!=='px'){return null;}return Number(match[1]);};parseLength.__closure={};parseLength.__workletHash=5190977403103;parseLength.__initData=_worklet_5190977403103_init_data;return parseLength;}();var _worklet_524832939925_init_data={code:\"function processBoxShadow_processBoxShadowJs3(props){const{parseBoxShadowString,parseLength}=this.__closure;const result=[];const rawBoxShadows=props.boxShadow;if(rawBoxShadows===''){return result;}const boxShadowList=parseBoxShadowString(rawBoxShadows.replace(/\\\\n/g,' '));for(const rawBoxShadow of boxShadowList){const parsedBoxShadow={offsetX:0,offsetY:0};let value;for(const arg in rawBoxShadow){switch(arg){case'offsetX':value=typeof rawBoxShadow.offsetX==='string'?parseLength(rawBoxShadow.offsetX):rawBoxShadow.offsetX;if(value===null){return[];}parsedBoxShadow.offsetX=value;break;case'offsetY':value=typeof rawBoxShadow.offsetY==='string'?parseLength(rawBoxShadow.offsetY):rawBoxShadow.offsetY;if(value===null){return[];}parsedBoxShadow.offsetY=value;break;case'spreadDistance':value=typeof rawBoxShadow.spreadDistance==='string'?parseLength(rawBoxShadow.spreadDistance):rawBoxShadow.spreadDistance;if(value===null){return[];}parsedBoxShadow.spreadDistance=value;break;case'blurRadius':value=typeof rawBoxShadow.blurRadius==='string'?parseLength(rawBoxShadow.blurRadius):rawBoxShadow.blurRadius;if(value===null||value<0){return[];}parsedBoxShadow.blurRadius=value;break;case'color':parsedBoxShadow.color=rawBoxShadow.color;break;case'inset':parsedBoxShadow.inset=rawBoxShadow.inset;}}result.push(parsedBoxShadow);}props.boxShadow=result;}\"};export var processBoxShadow=function(){var processBoxShadow=function processBoxShadow(props){var result=[];var rawBoxShadows=props.boxShadow;if(rawBoxShadows===''){return result;}var boxShadowList=parseBoxShadowString(rawBoxShadows.replace(/\\n/g,' '));for(var rawBoxShadow of boxShadowList){var parsedBoxShadow={offsetX:0,offsetY:0};var value=void 0;for(var arg in rawBoxShadow){switch(arg){case'offsetX':value=typeof rawBoxShadow.offsetX==='string'?parseLength(rawBoxShadow.offsetX):rawBoxShadow.offsetX;if(value===null){return[];}parsedBoxShadow.offsetX=value;break;case'offsetY':value=typeof rawBoxShadow.offsetY==='string'?parseLength(rawBoxShadow.offsetY):rawBoxShadow.offsetY;if(value===null){return[];}parsedBoxShadow.offsetY=value;break;case'spreadDistance':value=typeof rawBoxShadow.spreadDistance==='string'?parseLength(rawBoxShadow.spreadDistance):rawBoxShadow.spreadDistance;if(value===null){return[];}parsedBoxShadow.spreadDistance=value;break;case'blurRadius':value=typeof rawBoxShadow.blurRadius==='string'?parseLength(rawBoxShadow.blurRadius):rawBoxShadow.blurRadius;if(value===null||value<0){return[];}parsedBoxShadow.blurRadius=value;break;case'color':parsedBoxShadow.color=rawBoxShadow.color;break;case'inset':parsedBoxShadow.inset=rawBoxShadow.inset;}}result.push(parsedBoxShadow);}props.boxShadow=result;};processBoxShadow.__closure={parseBoxShadowString:parseBoxShadowString,parseLength:parseLength};processBoxShadow.__workletHash=524832939925;processBoxShadow.__initData=_worklet_524832939925_init_data;return processBoxShadow;}();","map":{"version":3,"names":["_worklet_14926553619120_init_data","code","parseBoxShadowString","rawBoxShadows","result","rawBoxShadow","split","map","bS","trim","filter","boxShadow","offsetX","offsetY","keywordDetectedAfterLength","lengthCount","args","arg","inset","blurRadius","spreadDistance","color","push","__closure","__workletHash","__initData","_worklet_5190977403103_init_data","parseLength","length","argsWithUnitsRegex","match","exec","Number","isNaN","_worklet_524832939925_init_data","processBoxShadow","props","boxShadowList","replace","parsedBoxShadow","value"],"sources":["C:\\Users\\Jorn\\Documents\\hitster\\node_modules\\react-native-reanimated\\src\\processBoxShadow.ts"],"sourcesContent":["/* based on:\n * https://github.com/facebook/react-native/blob/main/packages/react-native/Libraries/StyleSheet/processBoxShadow.js\n */\n'use strict';\n\nimport type { BoxShadowValue, OpaqueColorValue } from 'react-native';\n\nimport type { StyleProps } from '.';\n\nfunction parseBoxShadowString(rawBoxShadows: string): Array<BoxShadowValue> {\n  'worklet';\n  const result: Array<BoxShadowValue> = [];\n\n  for (const rawBoxShadow of rawBoxShadows\n    .split(/,(?![^()]*\\))/) // split by comma that is not in parenthesis\n    .map((bS) => bS.trim())\n    .filter((bS) => bS !== '')) {\n    const boxShadow: BoxShadowValue = {\n      offsetX: 0,\n      offsetY: 0,\n    };\n    let offsetX: number | string | null = null;\n    let offsetY: number | string | null = null;\n    let keywordDetectedAfterLength = false;\n\n    let lengthCount = 0;\n\n    // split rawBoxShadow string by all whitespaces that are not in parenthesis\n    const args = rawBoxShadow.split(/\\s+(?![^(]*\\))/);\n    for (const arg of args) {\n      if (arg === 'inset') {\n        if (boxShadow.inset != null) {\n          return [];\n        }\n        if (offsetX != null) {\n          keywordDetectedAfterLength = true;\n        }\n        boxShadow.inset = true;\n        continue;\n      }\n\n      switch (lengthCount) {\n        case 0:\n          offsetX = arg;\n          lengthCount++;\n          break;\n        case 1:\n          if (keywordDetectedAfterLength) {\n            return [];\n          }\n          offsetY = arg;\n          lengthCount++;\n          break;\n        case 2:\n          if (keywordDetectedAfterLength) {\n            return [];\n          }\n          boxShadow.blurRadius = arg;\n          lengthCount++;\n          break;\n        case 3:\n          if (keywordDetectedAfterLength) {\n            return [];\n          }\n          boxShadow.spreadDistance = arg;\n          lengthCount++;\n          break;\n        case 4:\n          if (keywordDetectedAfterLength) {\n            return [];\n          }\n          boxShadow.color = arg;\n          lengthCount++;\n          break;\n        default:\n          return [];\n      }\n    }\n\n    if (offsetX === null || offsetY === null) {\n      return [];\n    }\n\n    boxShadow.offsetX = offsetX;\n    boxShadow.offsetY = offsetY;\n\n    result.push(boxShadow);\n  }\n  return result;\n}\n\nfunction parseLength(length: string): number | null {\n  'worklet';\n  // matches on args with units like \"1.5 5% -80deg\"\n  const argsWithUnitsRegex = /([+-]?\\d*(\\.\\d+)?)([\\w\\W]+)?/g;\n  const match = argsWithUnitsRegex.exec(length);\n\n  if (!match || Number.isNaN(match[1])) {\n    return null;\n  }\n\n  if (match[3] != null && match[3] !== 'px') {\n    return null;\n  }\n\n  return Number(match[1]);\n}\n\ntype ParsedBoxShadow = {\n  offsetX: number;\n  offsetY: number;\n  blurRadius?: number | OpaqueColorValue;\n  spreadDistance?: number;\n  inset?: boolean;\n  color?: string;\n};\n\nexport function processBoxShadow(props: StyleProps) {\n  'worklet';\n  const result: Array<ParsedBoxShadow> = [];\n\n  const rawBoxShadows = props.boxShadow;\n\n  if (rawBoxShadows === '') {\n    return result;\n  }\n\n  const boxShadowList = parseBoxShadowString(\n    (rawBoxShadows as string).replace(/\\n/g, ' ')\n  );\n\n  for (const rawBoxShadow of boxShadowList) {\n    const parsedBoxShadow: ParsedBoxShadow = {\n      offsetX: 0,\n      offsetY: 0,\n    };\n\n    let value;\n    for (const arg in rawBoxShadow) {\n      switch (arg) {\n        case 'offsetX':\n          value =\n            typeof rawBoxShadow.offsetX === 'string'\n              ? parseLength(rawBoxShadow.offsetX)\n              : rawBoxShadow.offsetX;\n          if (value === null) {\n            return [];\n          }\n\n          parsedBoxShadow.offsetX = value;\n          break;\n        case 'offsetY':\n          value =\n            typeof rawBoxShadow.offsetY === 'string'\n              ? parseLength(rawBoxShadow.offsetY)\n              : rawBoxShadow.offsetY;\n          if (value === null) {\n            return [];\n          }\n\n          parsedBoxShadow.offsetY = value;\n          break;\n        case 'spreadDistance':\n          value =\n            typeof rawBoxShadow.spreadDistance === 'string'\n              ? parseLength(rawBoxShadow.spreadDistance)\n              : rawBoxShadow.spreadDistance;\n          if (value === null) {\n            return [];\n          }\n\n          parsedBoxShadow.spreadDistance = value;\n          break;\n        case 'blurRadius':\n          value =\n            typeof rawBoxShadow.blurRadius === 'string'\n              ? parseLength(rawBoxShadow.blurRadius)\n              : (rawBoxShadow.blurRadius as number);\n          if (value === null || value < 0) {\n            return [];\n          }\n\n          parsedBoxShadow.blurRadius = value;\n          break;\n        case 'color':\n          parsedBoxShadow.color = rawBoxShadow.color;\n          break;\n        case 'inset':\n          parsedBoxShadow.inset = rawBoxShadow.inset;\n      }\n    }\n    result.push(parsedBoxShadow);\n  }\n  props.boxShadow = result;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}