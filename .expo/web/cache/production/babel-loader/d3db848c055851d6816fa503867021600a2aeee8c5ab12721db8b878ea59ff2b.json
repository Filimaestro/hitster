{"ast":null,"code":"'use strict';import{ReanimatedError}from\"./errors.js\";var NEWTON_ITERATIONS=4;var NEWTON_MIN_SLOPE=0.001;var SUBDIVISION_PRECISION=0.0000001;var SUBDIVISION_MAX_ITERATIONS=10;var kSplineTableSize=11;var kSampleStepSize=1.0/(kSplineTableSize-1.0);var _worklet_3860866739587_init_data={code:\"function A_BezierJs1(aA1,aA2){return 1.0-3.0*aA2+3.0*aA1;}\"};var A=function(){var A=function A(aA1,aA2){return 1.0-3.0*aA2+3.0*aA1;};A.__closure={};A.__workletHash=3860866739587;A.__initData=_worklet_3860866739587_init_data;return A;}();var _worklet_11353319778690_init_data={code:\"function B_BezierJs2(aA1,aA2){return 3.0*aA2-6.0*aA1;}\"};var B=function(){var B=function B(aA1,aA2){return 3.0*aA2-6.0*aA1;};B.__closure={};B.__workletHash=11353319778690;B.__initData=_worklet_11353319778690_init_data;return B;}();var _worklet_13951147952769_init_data={code:\"function C_BezierJs3(aA1){return 3.0*aA1;}\"};var C=function(){var C=function C(aA1){return 3.0*aA1;};C.__closure={};C.__workletHash=13951147952769;C.__initData=_worklet_13951147952769_init_data;return C;}();var _worklet_10414886855977_init_data={code:\"function calcBezier_BezierJs4(aT,aA1,aA2){const{A,B,C}=this.__closure;return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;}\"};var calcBezier=function(){var calcBezier=function calcBezier(aT,aA1,aA2){return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;};calcBezier.__closure={A:A,B:B,C:C};calcBezier.__workletHash=10414886855977;calcBezier.__initData=_worklet_10414886855977_init_data;return calcBezier;}();var _worklet_13312248725172_init_data={code:\"function getSlope_BezierJs5(aT,aA1,aA2){const{A,B,C}=this.__closure;return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);}\"};var getSlope=function(){var getSlope=function getSlope(aT,aA1,aA2){return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);};getSlope.__closure={A:A,B:B,C:C};getSlope.__workletHash=13312248725172;getSlope.__initData=_worklet_13312248725172_init_data;return getSlope;}();var _worklet_12177450045408_init_data={code:\"function binarySubdivide_BezierJs6(aX,aA,aB,mX1,mX2){const{calcBezier,SUBDIVISION_PRECISION,SUBDIVISION_MAX_ITERATIONS}=this.__closure;let currentX;let currentT;let i=0;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else{aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;}\"};var binarySubdivide=function(){var binarySubdivide=function binarySubdivide(aX,aA,aB,mX1,mX2){var currentX;var currentT;var i=0;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else{aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;};binarySubdivide.__closure={calcBezier:calcBezier,SUBDIVISION_PRECISION:SUBDIVISION_PRECISION,SUBDIVISION_MAX_ITERATIONS:SUBDIVISION_MAX_ITERATIONS};binarySubdivide.__workletHash=12177450045408;binarySubdivide.__initData=_worklet_12177450045408_init_data;return binarySubdivide;}();var _worklet_6332605929486_init_data={code:\"function newtonRaphsonIterate_BezierJs7(aX,aGuessT,mX1,mX2){const{NEWTON_ITERATIONS,getSlope,calcBezier}=this.__closure;for(let i=0;i<NEWTON_ITERATIONS;++i){const currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0){return aGuessT;}const currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;}\"};var newtonRaphsonIterate=function(){var newtonRaphsonIterate=function newtonRaphsonIterate(aX,aGuessT,mX1,mX2){for(var i=0;i<NEWTON_ITERATIONS;++i){var currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0){return aGuessT;}var currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;};newtonRaphsonIterate.__closure={NEWTON_ITERATIONS:NEWTON_ITERATIONS,getSlope:getSlope,calcBezier:calcBezier};newtonRaphsonIterate.__workletHash=6332605929486;newtonRaphsonIterate.__initData=_worklet_6332605929486_init_data;return newtonRaphsonIterate;}();var _worklet_14460386153780_init_data={code:\"function Bezier_BezierJs8(mX1,mY1,mX2,mY2){const{kSplineTableSize,calcBezier,kSampleStepSize,getSlope,NEWTON_MIN_SLOPE,newtonRaphsonIterate,binarySubdivide}=this.__closure;function LinearEasing(x){'worklet';return x;}if(!(mX1>=0&&mX1<=1&&mX2>=0&&mX2<=1)){throw new ReanimatedError('Bezier x values must be in [0, 1] range.');}if(mX1===mY1&&mX2===mY2){return LinearEasing;}const sampleValues=new Array(kSplineTableSize);for(let i=0;i<kSplineTableSize;++i){sampleValues[i]=calcBezier(i*kSampleStepSize,mX1,mX2);}function getTForX(aX){'worklet';let intervalStart=0.0;let currentSample=1;const lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;const dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);const guessForT=intervalStart+dist*kSampleStepSize;const initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}}return function Bezier_BezierJs8(x){'worklet';if(mX1===mY1&&mX2===mY2){return x;}if(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);};}\"};var _worklet_14037347669765_init_data={code:\"function LinearEasing_BezierJs9(x){return x;}\"};var _worklet_5797806243044_init_data={code:\"function getTForX_BezierJs10(aX){const{kSplineTableSize,sampleValues,kSampleStepSize,getSlope,mX1,mX2,NEWTON_MIN_SLOPE,newtonRaphsonIterate,binarySubdivide}=this.__closure;let intervalStart=0.0;let currentSample=1;const lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;const dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);const guessForT=intervalStart+dist*kSampleStepSize;const initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}}\"};var _worklet_6654693514544_init_data={code:\"function BezierEasing_BezierJs11(x){const{mX1,mY1,mX2,mY2,calcBezier,getTForX}=this.__closure;if(mX1===mY1&&mX2===mY2){return x;}if(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);}\"};export var Bezier=function(){var Bezier=function Bezier(mX1,mY1,mX2,mY2){var LinearEasing=function(){var LinearEasing=function LinearEasing(x){return x;};LinearEasing.__closure={};LinearEasing.__workletHash=14037347669765;LinearEasing.__initData=_worklet_14037347669765_init_data;return LinearEasing;}();if(!(mX1>=0&&mX1<=1&&mX2>=0&&mX2<=1)){throw new ReanimatedError('Bezier x values must be in [0, 1] range.');}if(mX1===mY1&&mX2===mY2){return LinearEasing;}var sampleValues=new Array(kSplineTableSize);for(var i=0;i<kSplineTableSize;++i){sampleValues[i]=calcBezier(i*kSampleStepSize,mX1,mX2);}var getTForX=function(){var getTForX=function getTForX(aX){var intervalStart=0.0;var currentSample=1;var lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;var dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);var guessForT=intervalStart+dist*kSampleStepSize;var initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}};getTForX.__closure={kSplineTableSize:kSplineTableSize,sampleValues:sampleValues,kSampleStepSize:kSampleStepSize,getSlope:getSlope,mX1:mX1,mX2:mX2,NEWTON_MIN_SLOPE:NEWTON_MIN_SLOPE,newtonRaphsonIterate:newtonRaphsonIterate,binarySubdivide:binarySubdivide};getTForX.__workletHash=5797806243044;getTForX.__initData=_worklet_5797806243044_init_data;return getTForX;}();return function(){var BezierEasing=function BezierEasing(x){if(mX1===mY1&&mX2===mY2){return x;}if(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);};BezierEasing.__closure={mX1:mX1,mY1:mY1,mX2:mX2,mY2:mY2,calcBezier:calcBezier,getTForX:getTForX};BezierEasing.__workletHash=6654693514544;BezierEasing.__initData=_worklet_6654693514544_init_data;return BezierEasing;}();};Bezier.__closure={kSplineTableSize:kSplineTableSize,calcBezier:calcBezier,kSampleStepSize:kSampleStepSize,getSlope:getSlope,NEWTON_MIN_SLOPE:NEWTON_MIN_SLOPE,newtonRaphsonIterate:newtonRaphsonIterate,binarySubdivide:binarySubdivide};Bezier.__workletHash=14460386153780;Bezier.__initData=_worklet_14460386153780_init_data;return Bezier;}();","map":{"version":3,"names":["ReanimatedError","NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","_worklet_3860866739587_init_data","code","A","aA1","aA2","__closure","__workletHash","__initData","_worklet_11353319778690_init_data","B","_worklet_13951147952769_init_data","C","_worklet_10414886855977_init_data","calcBezier","aT","_worklet_13312248725172_init_data","getSlope","_worklet_12177450045408_init_data","binarySubdivide","aX","aA","aB","mX1","mX2","currentX","currentT","i","Math","abs","_worklet_6332605929486_init_data","newtonRaphsonIterate","aGuessT","currentSlope","_worklet_14460386153780_init_data","_worklet_14037347669765_init_data","_worklet_5797806243044_init_data","_worklet_6654693514544_init_data","Bezier","mY1","mY2","LinearEasing","x","sampleValues","Array","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope","BezierEasing"],"sources":["C:\\Users\\Jorn\\Documents\\hitster\\node_modules\\react-native-reanimated\\src\\Bezier.ts"],"sourcesContent":["'use strict';\n\nimport { ReanimatedError } from './errors';\n\n/**\n * https://github.com/gre/bezier-easing BezierEasing - use bezier curve for\n * transition easing function by Gaëtan Renaudeau 2014 - 2015 – MIT License\n */\n\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\n\nconst NEWTON_ITERATIONS = 4;\nconst NEWTON_MIN_SLOPE = 0.001;\nconst SUBDIVISION_PRECISION = 0.0000001;\nconst SUBDIVISION_MAX_ITERATIONS = 10;\n\nconst kSplineTableSize = 11;\nconst kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\nfunction A(aA1: number, aA2: number): number {\n  'worklet';\n  return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n}\nfunction B(aA1: number, aA2: number): number {\n  'worklet';\n  return 3.0 * aA2 - 6.0 * aA1;\n}\nfunction C(aA1: number) {\n  'worklet';\n  return 3.0 * aA1;\n}\n\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nfunction calcBezier(aT: number, aA1: number, aA2: number): number {\n  'worklet';\n  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n}\n\n// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\nfunction getSlope(aT: number, aA1: number, aA2: number): number {\n  'worklet';\n  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n}\n\nfunction binarySubdivide(\n  aX: number,\n  aA: number,\n  aB: number,\n  mX1: number,\n  mX2: number\n): number {\n  'worklet';\n  let currentX;\n  let currentT;\n  let i = 0;\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (\n    Math.abs(currentX) > SUBDIVISION_PRECISION &&\n    ++i < SUBDIVISION_MAX_ITERATIONS\n  );\n  return currentT;\n}\n\nfunction newtonRaphsonIterate(\n  aX: number,\n  aGuessT: number,\n  mX1: number,\n  mX2: number\n): number {\n  'worklet';\n  for (let i = 0; i < NEWTON_ITERATIONS; ++i) {\n    const currentSlope = getSlope(aGuessT, mX1, mX2);\n    if (currentSlope === 0.0) {\n      return aGuessT;\n    }\n    const currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n    aGuessT -= currentX / currentSlope;\n  }\n  return aGuessT;\n}\n\nexport function Bezier(\n  mX1: number,\n  mY1: number,\n  mX2: number,\n  mY2: number\n): (x: number) => number {\n  'worklet';\n\n  function LinearEasing(x: number): number {\n    'worklet';\n    return x;\n  }\n\n  if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n    throw new ReanimatedError('Bezier x values must be in [0, 1] range.');\n  }\n\n  if (mX1 === mY1 && mX2 === mY2) {\n    return LinearEasing;\n  }\n\n  const sampleValues = new Array(kSplineTableSize);\n\n  // Precompute samples table\n  for (let i = 0; i < kSplineTableSize; ++i) {\n    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n  }\n\n  function getTForX(aX: number): number {\n    'worklet';\n    let intervalStart = 0.0;\n    let currentSample = 1;\n    const lastSample = kSplineTableSize - 1;\n\n    for (\n      ;\n      currentSample !== lastSample && sampleValues[currentSample] <= aX;\n      ++currentSample\n    ) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n\n    // Interpolate to provide an initial guess for t\n    const dist =\n      (aX - sampleValues[currentSample]) /\n      (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    const guessForT = intervalStart + dist * kSampleStepSize;\n\n    const initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(\n        aX,\n        intervalStart,\n        intervalStart + kSampleStepSize,\n        mX1,\n        mX2\n      );\n    }\n  }\n\n  return function BezierEasing(x) {\n    'worklet';\n    if (mX1 === mY1 && mX2 === mY2) {\n      return x; // linear\n    }\n    // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n    if (x === 0) {\n      return 0;\n    }\n    if (x === 1) {\n      return 1;\n    }\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}